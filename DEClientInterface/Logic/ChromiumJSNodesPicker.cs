// DataExcavator, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null
// DEClientInterface.Logic.ChromiumJSNodesPicker
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;
using CefSharp;
using CefSharp.Wpf;
using DEClientInterface;
using DEClientInterface.UIControls;
using DEClientInterface.UIExtensions;
using DEClientInterface.UIWindows;
using ExcavatorSharp.CEF;
using ExcavatorSharp.Common;
using ExcavatorSharp.Objects;
using Newtonsoft.Json;


namespace DEClientInterface.Logic
{
	public class ChromiumJSNodesPicker
	{
		private static string NodesJSPickerScript = "\r\n(function() {\r\n\r\n\t/* v.1.0 */\r\n \r\n\t/* Clear console */\r\n\tconsole.clear();\r\n\t\r\n\t/* Scroll down and then scroll up - let all elements be loaded on the page */\r\n\tsetTimeout(function() { window.scrollTo( 0, 5000 ); }, 500);\r\n\tsetTimeout(function() { window.scrollTo( 0, 10000 ); }, 1000);\r\n\tsetTimeout(function() { window.scrollTo( 0, 20000 ); }, 2000);\r\n\tsetTimeout(function() { window.scrollTo( 0, 30000 ); }, 3000);\r\n\tsetTimeout(function() { window.scrollTo( 0, 0 ); }, 3500);\r\n\t\r\n\t/* Get window initial size */\r\n\tvar windowInitialSize = document.body.getBoundingClientRect();\r\n\t\r\n\t/* Create GUID */\r\n\tfunction uuidv4() {\r\n\t  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n\t\t(c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n\t  );\r\n\t}\r\n\t  \r\n\t/* CSS query check */\r\n\tconst queryCheck = (s) => document.createDocumentFragment().querySelector(s);\r\n\r\n\t/* Check is CSS selector valid */\r\n\tconst isSelectorValid = (selector) => {\r\n\t  \t\r\n\t\tif (!selector || selector === null)\r\n\t\t\treturn false;\r\n\t\t\r\n\t\tif (selector.indexOf(':') !== -1) /* Pseudo-selectors not supported */\r\n\t\t\treturn false;\r\n\t\t\r\n\t\ttry { queryCheck(selector); } catch { return false; }\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/* Quotation character */\r\n\tvar quotationCharacter_double = String.fromCharCode(34);\r\n\tvar quotationCharacter_single = String.fromCharCode(39);\r\n\r\n\t/* Prepare variables container */\r\n\twindow.dePageInspector = {\r\n\r\n\t\t/* ----------------------------- */\r\n\t\t/*           VARIABLES           */\r\n\t\t/* ----------------------------- */\r\n\r\n\t\t/* Element on active hover */\r\n\t\tcurrentHoveredElementLink: null,\r\n\t\t\r\n\t\t/* Highlighter element (border around current hovered element) */\r\n\t\telementsHighlighter: null,\r\n\t\t \r\n\t\t/* Picked elements + it's highlighters */\r\n\t\t/*\r\n\t\t\tlet pickedElementContainer = {\r\n\t\t\t\tpickedElementNr: selectorNumberParamsContext,\r\n\t\t\t\tpickedElementName: selectorNameParamsContext,\r\n\t\t\t\tpickedElementGUID: selectorGUIDParamsContext, \r\n\t\t\t\tpickedElement: window.dePageInspector.currentHoveredElementLink,\r\n\t\t\t\tpickedElementCalculatedSelector: pickedElementCSSSelector.calculatedSelector,\r\n\t\t\t\tpickedElementPossiblySelectors: pickedElementCSSSelector.possiblySelectors,\r\n\t\t\t\tassociatedHighlighter: newElementFixedLighter,\r\n\t\t\t\tselectedElementTopLabelBlock: selectedElementTopLabelBlock\r\n\t\t\t};\r\n\t\t*/\r\n\t\tpagePickedElements: [],\r\n\t\t\r\n\t\t/* Actual expanded element */\r\n\t\tactualExpandedElement: null,\r\n\t\t  \r\n\t\t/* ----------------------------- */\r\n\t\t/*           FUNCTIONS           */\r\n\t\t/* ----------------------------- */\r\n\t\t\r\n\t\t/* Initialize selectors function */\r\n\t\tinitializeSelectors: null,\r\n\t\t\r\n\t\t/* Add new selector */\r\n\t\taddSelectorFromUI: null,\r\n\t\t\r\n\t\t/* Unblind all elements */\r\n\t\tunblindAllElements: null,\r\n\r\n\t\t/* Blind all elements other then selected */\r\n\t\tblindElementsOtherThanSelected: null,\r\n\t\t\r\n\t\t/* Remove selector from UI */\r\n\t\tdeleteSelectorProperties: null,\r\n\t\t\r\n\t\t/* Open selector properties modal window */\r\n\t\texpandSelectorProperties: null,\r\n\t\t\r\n\t\t/* Collapse specified selector properties */\r\n\t\tcollapseOpenedSelectorProperties: null,\r\n\t\t\r\n\t\t/* Clear all picked and hovered elements on the page */\r\n\t\tclearAllPickedAndHoveredElements:  null,\r\n\t\t\r\n\t\t/* Update picked node name */\r\n\t\tupdatePickedNodeName: null\r\n\t};\r\n\t\r\n\t/* Insert page CSS styling */\r\n\tfunction insertDataExcavatorPageStyle() {\r\n\t\tdocument.head.insertAdjacentHTML('beforeend', `<style> .de-elements-hightlighter { position: absolute; overflow: visible; z-index: 100001; } .de-hightlighter-container { position: absolute; z-index: 110000; top: 0; width: 250px; right: -246px; padding-top: 10px; background: #094b94; font-family: Arial, sans-serif; font-size: 12px; box-shadow: 2px 4px 6px #454545; } .de-highlighter-top-buttons { display: flex; flex-direction: column; justify-content: center; align-items: center;  margin-bottom: 5px; padding-bottom: 10px; border-bottom: 1px solid white; } .de-highlighter-top-buttons-two { display: flex; flex-direction: row; justify-content: flex-start; align-items: center; padding-bottom: 10px; padding-left: 5px; padding-right: 5px; } .de-highlighter-top-buttons-two > div { width: calc(50% - 10px); margin-left: 5px; margin-right: 5px; } .de-highlighter-top-buttons > div { width: calc(100% - 20px); } .de-highlighter-bottom-buttons { padding-top: 6px; display: flex; flex-direction: column; justify-content: center; align-items: center; padding-top: 5px; padding-bottom: 6px; border-top: 1px solid white; margin-top: 10px; } .de-highlighter-bottom-buttons-two { padding-top: 6px; display: flex; flex-direction: column; justify-content: center; align-items: center; padding-top: 5px; border-top: 1px solid white; margin-top: 10px; } .de-highlighter-bottom-buttons > div, .de-highlighter-bottom-buttons-two > div { margin-top: 5px; margin-bottom: 5px; width: calc(100% - 20px); } .de-icon { cursor: pointer; height: 32px; display: flex; flex-direction: column; justify-content: center; align-items: center; color: black; font-weight: bold;  border-radius: 3px; } .de-hidden { display: none; } [data-de-lighted-element] { border: 4px solid #094b94 !important; border-radius: 5px !important; } [data-role='pick-element-button'], [data-role='re-pick-element-on-page'], [data-role='save-selector'] { background: #35ff00; font-size: 16px; } [data-role='go-parent'], [data-role='go-child'] { background: #00f3ff; font-size: 16px; } [data-role='remove-element-button'] { background: #ff7070; font-size: 16px; } [data-role='edit-element-button'] { background: #5bdcff; font-size: 16px; } [data-role='find-elements-button'] { background: #ebf3ff; font-size: 16px; } [data-role='jump-to-image-node'] { background: #eca3ff; font-size: 16px; text-align: center !important; height: 55px !important; } [data-disabled] { opacity: .8; background: #cccccc; cursor: auto; } .de-highlighter-codearea { width: 100%; padding-bottom: 10px; padding-left: 10px; padding-top: 10px; border-top: 1px solid white; } .highlighter-nodecode-textarea { width: 230px; height: 130px; resize: none; padding: 4px; font-size: 12px; margin-bottom: 5px; margin-top: 5px; } .press-enter-or-click-on-plus { color: white; margin-bottom: 10px; margin-top: 10px; text-align: center; font-size: 15px; font-weight: bold; } .de-highlighter-css-selectors-picker { border-top: 1px solid white; padding-top: 5px; padding-left: 10px; } .css-selectors-variants-label, .white-small-label { color: white; } .css-selectors-variants-picker, .picked-selector-value-input, .highlighter-nodetext-input { margin-top: 5px !important; width: 230px !important; height: 31px !important; padding: 3px 7px !important; } .css-selectors-variants-picker { margin-bottom: 5px; } .de-highlighter-picked-selector-value { padding-left: 10px; } .de-selected-element-number { position: absolute; height: 30px; font-size: 12px; color: white; text-align: left; padding-left: 10px; display: flex; flex-direction: row; justify-content: flex-start; align-items: center; padding-right: 10px; background: #094b94; z-index: 100000; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Arial, sans-serif; } [de-picked-node-samenodes-area] { background: #ffcedd !important; border: 4px solid red !important; } .de-elements-hightlighter input, .de-elements-hightlighter select, .de-elements-hightlighter textarea { border: 1px solid #888C8C; border-radius: 3px; box-shadow: 0 1px 2px rgba(15,17,17,.15) inset; outline: 0; box-sizing: border-box; } [de-blinded] { opacity: .5; z-index: 99999; } .expand-collapse-details { cursor: pointer; border-radius: 6px; padding: 2px 4px; line-height: normal; font-size: 12px; background: #35ff00; border: 1px solid #ccc; color: black; margin-left: 7px; margin-right: -4px; user-select: none; } [data-role='selector-name'] { margin-left: 6px; } [data-role='highlighter-nodecode-textarea'], [data-role='highlighter-nodetext-input'] { background: #cccccc !important; color: black !important; } .multiple-elements-found-with-this-selector, .images-detected-into-selected-node { text-align: center; color: white; font-size: 14px; font-weight: bold; } [data-role='picked-element-image-example'] { width: calc(100% - 20px); margin-top: 5px; } [data-role='picked-element-image-example-label'] { margin-top: 5px; } .node-handled-as-image { color: white; font-size: 19px; font-weight: bold; margin-bottom: 5px; } </style>`)\r\n\t}\r\n\t \r\n\t/* Get elements selector template (red boreder with buttons) */\r\n\tfunction createAndInsertDocumentElementsSelector() {\r\n\t\t\r\n\t\t/* Create element */\r\n\t\tlet highlighterNewElement = document.createElement('div');\r\n\t\thighlighterNewElement.classList.add('de-elements-hightlighter');\r\n\t\thighlighterNewElement.setAttribute('data-role', 'de-elements-highlighter');\r\n\t\thighlighterNewElement.setAttribute('data-ignorehover', 'true');\r\n\t\thighlighterNewElement.innerHTML = `<div class='de-hightlighter-container' data-role='de-hightlighter-container' data-ignorehover='true'><div class='de-highlighter-top-buttons' data-ignorehover='true'><div data-role='pick-element-button' class='de-icon de-pick-element' data-ignorehover='true' title='Pick element'>+ Pick element</div></div><div class='de-highlighter-top-buttons-two de-hidden' data-ignorehover='true'><div class='de-icon' data-role='go-parent' data-ignorehover='true'>↑ Go parent</div><div class='de-icon' data-role='go-child' data-ignorehover='true'>↓ Go child</div></div><div data-role='click-on-plus-or-press-enter' class='press-enter-or-click-on-plus' data-ignorehover='true' >Mouseclick, Enter, or press Pick</div><div class='de-highlighter-codearea' data-ignorehover='true'><div data-ignorehover='true' class='node-handled-as-image de-hidden'>Node handled as picture</div><div class='white-small-label' data-ignorehover='true'>Element HTML:</div><textarea readonly='readonly' data-role='highlighter-nodecode-textarea' class='highlighter-nodecode-textarea' data-ignorehover='true'></textarea><div class='white-small-label' data-ignorehover='true'>Element text:</div><input type='text' data-ignorehover='true' readonly='readonly' class='highlighter-nodetext-input' data-role='highlighter-nodetext-input' /><div class='white-small-label de-hidden' data-ignorehover='true' data-role='picked-element-image-example-label'>Element picture:</div><img class='de-hidden' data-role='picked-element-image-example' src='' alt='picked-element-image-sample' data-ignorehover='true' /></div><div data-role='de-highlighter-css-selectors-picker' class='de-highlighter-css-selectors-picker de-hidden' data-ignorehover='true'><div data-ignorehover='true' class='css-selectors-variants-label'>Variants of CSS selectors</div><select class='css-selectors-variants-picker' data-ignorehover='true' data-role='css-selectors-variants'></select></div><div data-role='de-highlighter-picked-selector-value' class='de-highlighter-picked-selector-value de-hidden' data-ignorehover='true'><div data-ignorehover='true' class='css-selectors-variants-label'>Picked selector value (Editable)</div><input type='text' data-ignorehover='true' class='picked-selector-value-input' data-role='picked-selector-value-input' /></div><div class='de-highlighter-bottom-buttons-two de-hidden' data-ignorehover='true'><div class='multiple-elements-found-with-this-selector de-hidden' data-ignorehover='true'>Warning! Multiple nodes with this selector found on the page.</div><div data-role='find-elements-button' class='de-icon' data-ignorehover='true' title='Show/Hide all nodes'>Show/Hide all nodes (*)</div><div class='images-detected-into-selected-node de-hidden' data-ignorehover='true'>Pictures detected inside node</div><div class='de-icon de-hidden' data-ignorehover='true' data-role='jump-to-image-node'>Jump to &lt;IMG&gt; and<br /> handle as image</div></div><div class='de-highlighter-bottom-buttons de-hidden' data-ignorehover='true'><div class='de-icon de-hidden' data-role='re-pick-element-on-page' data-ignorehover='true'>Re-pick element on page</div><div data-role='remove-element-button' class='de-icon' data-ignorehover='true' title='Delete selector'>Delete selector</div><div class='de-icon de-hidden' data-ignorehover='true' data-role='save-selector'>Save selector</div></div></div>`;\r\n\t\thighlighterNewElement.style.top = '-1000px';\r\n\t\thighlighterNewElement.style.left = '-1000px';\r\n\t\tdocument.body.append(highlighterNewElement);\r\n\t\t \r\n\t\treturn highlighterNewElement;\r\n\t}\r\n\t\r\n\t/* Create 'Selector number' textarea with selected element NR */\r\n\tfunction createAndInsertDocumentElementSelectorNumber(selectorNumber, selectorName) {\r\n\t\tlet newElementWithBlockNumber = document.createElement('div');\r\n\t\tnewElementWithBlockNumber.classList.add('de-selected-element-number');\r\n\t\tnewElementWithBlockNumber.setAttribute('de-selected-element-head-nr', selectorNumber);\r\n\t\tnewElementWithBlockNumber.setAttribute('data-ignorehover', 'true');\r\n\t\t \r\n\t\tlet selectorFullName = ``;\r\n\t\tif (typeof selectorName !== 'undefined' && selectorName && selectorName !== '')\r\n\t\t\tselectorFullName = `#${selectorNumber} <span data-role='selector-name' data-ignorehover='true'>${selectorName}</span>`;\r\n\t\telse\r\n\t\t\tselectorFullName = `#${selectorNumber} <span data-role='selector-name' data-ignorehover='true'></span>`;\r\n\t\t\t\r\n\t\tselectorFullName += `</span> <span class='expand-collapse-details de-hidden' data-role='expand-collapse-details' data-ignorehover='true'>Expand</span>`;\r\n\t\tnewElementWithBlockNumber.innerHTML = selectorFullName; \r\n\t\tnewElementWithBlockNumber.style.top = '-1000px';\r\n\t\tnewElementWithBlockNumber.style.left = '-1000px';\r\n\t\tdocument.body.append(newElementWithBlockNumber);\r\n\t\t\r\n\t\treturn newElementWithBlockNumber;\r\n\t}\r\n\t\r\n\t/* Get element size */\r\n\tfunction getHTMLNodeSizing(elem) {\r\n\t\t\r\n\t\tif (!elem || typeof elem === 'undefined')\r\n\t\t\treturn { width: 100, height: 100 };\r\n\t\t\r\n\t\tlet boundingClientRect = elem.getBoundingClientRect();\r\n\t\treturn {\r\n\t\t\twidth: boundingClientRect.width,\r\n\t\t\theight: boundingClientRect.height\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Get element page coordinates */\r\n\tfunction getHTMLNodeCoordinates(elem) { // crossbrowser version\r\n\t\r\n\t\tif (!elem || typeof elem === 'undefined')\r\n\t\t\treturn { top: -2000, left: -2000 };\r\n\t\r\n\t\tvar box = elem.getBoundingClientRect();\r\n\r\n\t\tvar body = document.body;\r\n\t\tvar docEl = document.documentElement;\r\n\r\n\t\tvar scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\r\n\t\tvar scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\r\n\r\n\t\tvar clientTop = docEl.clientTop || body.clientTop || 0;\r\n\t\tvar clientLeft = docEl.clientLeft || body.clientLeft || 0;\r\n\r\n\t\tvar top  = box.top +  scrollTop - clientTop;\r\n\t\tvar left = box.left + scrollLeft - clientLeft;\r\n\r\n\t\treturn { top: Math.round(top), left: Math.round(left) };\r\n\t}\r\n\t\r\n\t/* Adjust elements selector to it's page positions */\r\n\tfunction adjustElementsHighlighter(highlighterLink, pickedElementLink, pickState) { \r\n\t\t/* Get element coordinates and size */\r\n\t\tlet elementCoords = getHTMLNodeCoordinates(pickedElementLink);\r\n\t\tlet elementSizing = getHTMLNodeSizing(pickedElementLink);\r\n\t\t\r\n\t\t/* Set hightlighter initial coordinates and size */ \r\n\t\tlet highlighterLinkInnerBlock = highlighterLink.querySelector(`.de-hightlighter-container`);\r\n\t\tlet highlighterSize = highlighterLinkInnerBlock.getBoundingClientRect(); \r\n\t\tlet highlighterLeftPosition = (elementCoords.left + elementSizing.width); \r\n \r\n\t\t/* Drop radius to 0 */\r\n\t\thighlighterLinkInnerBlock.style.borderTopRightRadius = '';\r\n\t\thighlighterLinkInnerBlock.style.borderTopLeftRadius = '';\r\n\t\thighlighterLinkInnerBlock.style.borderBottomRightRadius = '';\r\n\t\thighlighterLinkInnerBlock.style.borderBottomLeftRadius = '';\r\n\t\t\r\n\t\tif (highlighterLeftPosition + highlighterSize.width < windowInitialSize.width) {  \r\n\t\t\t/* RIGHT TOP OUTER CORNER */\r\n\t\t\thighlighterLink.style.top = elementCoords.top + 'px';\r\n\t\t\thighlighterLink.style.left = (elementCoords.left + elementSizing.width) + 'px';\r\n\t\t\t\r\n\t\t\thighlighterLinkInnerBlock.style.borderTopRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomLeftRadius = '5px';\r\n\t\t}\r\n\t\telse if (elementCoords.left - highlighterSize.width > 0) {  \r\n\t\t\t/* LEFT TOP OUTER CORNER */\r\n\t\t\thighlighterLink.style.top = elementCoords.top + 'px';\r\n\t\t\thighlighterLink.style.left = (elementCoords.left - highlighterSize.width) + 8 + 'px';\r\n\t\t\t\r\n\t\t\thighlighterLinkInnerBlock.style.borderTopLeftRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomLeftRadius = '5px';\r\n\t\t}\r\n\t\telse if (elementCoords.top + elementSizing.height + highlighterSize.height < windowInitialSize.height) {\r\n\t\t\t/* BOTTOM LEFT OUTER CORNER */\r\n\t\t\thighlighterLink.style.top = (elementCoords.top + elementSizing.height) + 'px';\r\n\t\t\thighlighterLink.style.left = (elementCoords.left + 4) + 'px';\r\n\t\t\t\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomLeftRadius = '5px';\r\n\t\t}\r\n\t\telse if (elementCoords.top - highlighterSize.height - 10 > 0) {\r\n\t\t\t/* TOP CENTER OUTER CORNER */\r\n\t\t\thighlighterLink.style.top = (elementCoords.top - highlighterSize.height) + 'px';\r\n\t\t\thighlighterLink.style.left = (((elementCoords.left + elementSizing.width) / 2) - (highlighterSize.width / 2) + 4) + 'px';\r\n\t\t\t\r\n\t\t\thighlighterLinkInnerBlock.style.borderTopRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderTopLeftRadius = '5px';\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/* RIGHT TOP INNER CORNER */\r\n\t\t\thighlighterLink.style.top = (elementCoords.top + 5) + 'px';\r\n\t\t\thighlighterLink.style.left = (elementCoords.left + elementSizing.width) - (highlighterSize.width) + 'px';\r\n\t\t\t\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomRightRadius = '5px';\r\n\t\t\thighlighterLinkInnerBlock.style.borderBottomLeftRadius = '5px';\r\n\t\t} \r\n\t}\r\n\t\r\n\t/* Adjust elements labels to it's page positions */\r\n\tfunction adjustElementsTopLabel(labelLink, pickedElementLink) {\r\n\t\t\r\n\t\t/* Get element coordinates and size */\r\n\t\tlet elementCoords = getHTMLNodeCoordinates(pickedElementLink);\r\n\t\tlabelLink.style.left = `${elementCoords.left}px`;\r\n\t\tlabelLink.style.top = `${elementCoords.top - 27}px`;\r\n\r\n\t}\r\n\t\r\n\t/* Handle click on any element */\r\n\twindow.addEventListener('mousedown', function(e) { \r\n\t\t\r\n\t\tif (e && e.button === 0) { \r\n\t\t\tlet targetElement = e.toElement; \r\n\t\t\tif (!targetElement || typeof targetElement === 'undefined')\r\n\t\t\t\treturn;\r\n\t\t\t \r\n\t\t\tif (targetElement.getAttribute('data-ignorehover') !== null && targetElement.getAttribute('data-ignorehover') !== '')\r\n\t\t\t\treturn;\r\n\t\t\t \r\n\t\t\thandleHTMLElementPicked();\r\n\t\t}\r\n\t\t\r\n\t});\r\n\t \r\n\t/* Add document hover event - elements dynamic highlighter */\r\n\twindow.addEventListener('mouseover', function(e) { \r\n\t\t if (e.target) {\r\n\t\t \r\n\t\t\t/* Unblind all elements first */\r\n\t\t\twindow.dePageInspector.unblindAllElements();\r\n\t\t\t \r\n\t\t\t/* Check element over-light issue (lightings bubbling) */\r\n\t\t\tlet closestLightedElement = e.target.closest(`[data-de-lighted-element]`);\r\n\t\t\tif (closestLightedElement) {\r\n\t\t\t\tif (!closestLightedElement.getAttribute('data-linkedguid') || closestLightedElement.getAttribute('data-linkedguid') === null || closestLightedElement.getAttribute('data-linkedguid') == '') {\r\n\t\t\t\t\tclosestLightedElement.removeAttribute('data-de-lighted-element');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t \r\n\t\t\t/* Check for linked element itself */\r\n\t\t\tlet selfLinkedGUID = e.target.getAttribute('data-linkedguid');\r\n\t\t\tif (selfLinkedGUID && typeof selfLinkedGUID !== 'undefined' && selfLinkedGUID.length > 0) {\r\n\t\t\t\twindow.dePageInspector.blindElementsOtherThanSelected(selfLinkedGUID); \r\n\t\t\t\t\r\n\t\t\t\t/* Correct all already lighted elements positions */\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Check parent element already picked */\r\n\t\t\tlet closestSelectedPicker = e.target.closest(`[data-linkedguid]`);\r\n\t\t\tif (closestSelectedPicker && typeof closestSelectedPicker !== 'undefined') {\r\n\t\t\t\tlet linkedGUID = closestSelectedPicker.getAttribute('data-linkedguid');\r\n\t\t\t\twindow.dePageInspector.blindElementsOtherThanSelected(linkedGUID); \r\n\t\t\t\t\r\n\t\t\t\t/* Correct all already lighted elements positions */\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t \r\n\t\t\t/* Check for hover event ignorance */\r\n\t\t\tlet isHoverEventMustBeIgnored = e.target.getAttribute('data-ignorehover');\r\n\t\t\tif (isHoverEventMustBeIgnored === 'true') {\r\n\t\t\t\t/* Remove hovered border from the page layout anf return from mouseover event */\r\n\t\t\t\t/* + Check is modal binded to selector or not */\r\n\t\t\t\tlet elementHighlighterNode = null;\r\n\t\t\t\tif (e.target.getAttribute('data-role') === 'de-elements-highlighter') \r\n\t\t\t\t\telementHighlighterNode = e.target;\r\n\t\t\t\telse\r\n\t\t\t\t\telementHighlighterNode = e.target.closest(`[data-role='de-elements-highlighter']`);\r\n\t\t\t\t \r\n\t\t\t\t/* Remove lighted block only if it's already binded to some node */\r\n\t\t\t\tif (elementHighlighterNode && elementHighlighterNode.getAttribute('data-isbindedtonode')) {\r\n\t\t\t\t\tif (window.dePageInspector.currentHoveredElementLink)\r\n\t\t\t\t\t\twindow.dePageInspector.currentHoveredElementLink.removeAttribute('data-de-lighted-element');\r\n\t\t\t\t\twindow.dePageInspector.elementsHighlighter.style.top = '-1000px';\r\n\t\t\t\t\twindow.dePageInspector.elementsHighlighter.style.left = '-1000px';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/* Correct all already lighted elements positions */\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t\treturn;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t  \r\n\t\t\t/* Unlight previous element */\r\n\t\t\tif (window.dePageInspector.currentHoveredElementLink)\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink.removeAttribute('data-de-lighted-element');\r\n\t\t \r\n\t\t\t/* Light current element */\r\n\t\t\te.target.setAttribute('data-de-lighted-element', '');\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink = e.target;\r\n\t\t\t\r\n\t\t\t/* Adjust highlighter position */\r\n\t\t\tadjustElementsHighlighter(window.dePageInspector.elementsHighlighter, e.target, 'hovered'); \r\n\t\t\t\r\n\t\t\t/* Set hightlighter textarea content */\r\n\t\t\tlet elementOuterHTML = window.dePageInspector.currentHoveredElementLink.outerHTML;\r\n\t\t\telementOuterHTML = prepareNodeHTMLBeforeTextareaDisplaying(elementOuterHTML);\r\n\t\t\twindow.dePageInspector.elementsHighlighter.querySelector(`[data-role='highlighter-nodecode-textarea']`).value = elementOuterHTML;\r\n\t\t\t\r\n\t\t\t/* Set highlighter input - inner text data */\r\n\t\t\tif (window.dePageInspector.currentHoveredElementLink.innerText) {\r\n\t\t\t\tlet elementInnerText = window.dePageInspector.currentHoveredElementLink.innerText.trim();\r\n\t\t\t\twindow.dePageInspector.elementsHighlighter.querySelector(`[data-role='highlighter-nodetext-input']`).value = elementInnerText;\r\n\t\t\t}\r\n\t\t\t \r\n\t\t\t/* Correct all already lighted elements positions */\r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t }\r\n\t});\r\n\t\r\n\t/* Correct all lighted elements positions */\r\n\tfunction correctAllLightedElementsPositions() {\r\n\t\tfor (let pe = 0; pe < window.dePageInspector.pagePickedElements.length; pe++) { \r\n\t\t\tadjustElementsHighlighter(window.dePageInspector.pagePickedElements[pe].associatedHighlighter, window.dePageInspector.pagePickedElements[pe].pickedElement, 'picked');\r\n\t\t\tadjustElementsTopLabel(window.dePageInspector.pagePickedElements[pe].selectedElementTopLabelBlock, window.dePageInspector.pagePickedElements[pe].pickedElement);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Compare two CSS selectors by occurences count */\r\n\tfunction compare( a, b ) {\r\n\t  if ( a.resultsOnThePage < b.resultsOnThePage ) {\r\n\t\treturn -1;\r\n\t  }\r\n\t  if ( a.resultsOnThePage > b.resultsOnThePage ) {\r\n\t\treturn 1;\r\n\t  }\r\n\t  return 0;\r\n\t}\r\n\t\r\n\t/* Get clicked element CSS selector */\r\n\tfunction GetElementCSSSelector(NodeLink, LookAtTopNode, forcedCSSSelector) {\r\n\t\r\n\t\t/* Results container */\r\n\t\tlet results = {  \r\n\t\t\tpossiblySelectors: [], \r\n\t\t\tcalculatedSelector: '', \r\n\t\t\tcalculatedSelector_resultsOnThePage: 0\r\n\t\t};\r\n\t\r\n\t\t/* Direct selector by item tag name */\r\n\t\tlet itemTagName = NodeLink.tagName.toLowerCase();\r\n\t\tresults.possiblySelectors.push({ selector: itemTagName, resultsOnThePage: document.querySelectorAll(itemTagName).length });\r\n\t\t\r\n\t\t/* Direct selector by item ID | id=... */\r\n\t\tif (NodeLink.getAttribute('id') && NodeLink.getAttribute('id').trim() !== '') {\r\n\t\t\tlet selectorText = `#${NodeLink.getAttribute('id')}`;\r\n\t\t\tif (isSelectorValid(selectorText)) {\r\n\t\t\t\tresults.possiblySelectors.push({ selector: selectorText, resultsOnThePage: document.querySelectorAll(selectorText).length });\r\n\t\t\t\tresults.calculatedSelector = selectorText;\r\n\t\t\t\tresults.calculatedSelector_resultsOnThePage = document.querySelectorAll(selectorText).length;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Selectors by classes | class=... */\r\n\t\tif (NodeLink.getAttribute('class') && NodeLink.getAttribute('class').trim() !== '') {\r\n\t\t\tlet allTagClasses = NodeLink.getAttribute('class').split(' ');\r\n\t\t\tlet tagClassListSelector = '';\r\n\t\t\tfor (let xi = 0; xi < allTagClasses.length; xi++) {\r\n\t\t\t\tif (allTagClasses[xi] && allTagClasses[xi] != null && allTagClasses[xi] !== '') {\r\n\t\t\t\t\tlet selectorText = `.${allTagClasses[xi]}`;\r\n\t\t\t\t\tif (isSelectorValid(selectorText)) {\r\n\t\t\t\t\t\tresults.possiblySelectors.push({ selector: selectorText, resultsOnThePage: document.querySelectorAll(selectorText).length });\r\n\t\t\t\t\t\ttagClassListSelector += selectorText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (isSelectorValid(tagClassListSelector))\r\n\t\t\t\tresults.possiblySelectors.push({ selector: tagClassListSelector, resultsOnThePage: document.querySelectorAll(tagClassListSelector).length });\r\n\t\t}\r\n\t\t\r\n\t\t/* Selectors by attributes | attribute=... */\r\n\t\tfor (let xi = 0; xi < NodeLink.attributes.length; xi++) {\r\n\t\t\tif (NodeLink.attributes[xi].name !== 'class' && NodeLink.attributes[xi].name !== 'id' && NodeLink.attributes[xi].name.indexOf('id') === -1 && NodeLink.attributes[xi].name !== 'href' && NodeLink.attributes[xi].name !== 'style' && NodeLink.attributes[xi].name !== 'src' && NodeLink.attributes[xi].name !== 'srcset' && NodeLink.attributes[xi].name !== 'data-de-lighted-element' && NodeLink.attributes[xi].name !== 'data-ignorehover' && NodeLink.attributes[xi].value.trim() !== '') {\r\n\t\t\t\tlet selectorText = `[${NodeLink.attributes[xi].name}='${NodeLink.attributes[xi].value}']`;\r\n\t\t\t\tif (isSelectorValid(selectorText))\r\n\t\t\t\t\tresults.possiblySelectors.push({ selector: selectorText, resultsOnThePage: document.querySelectorAll(selectorText).length }); \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Get parent -> child selectors (first parent) */\r\n\t\tif (NodeLink.parentElement && LookAtTopNode === true) { \r\n\t\t\tlet parentNode = NodeLink.parentElement;\r\n\t\t\tlet parentNodeSelectors = GetElementCSSSelector(parentNode, false);\r\n\t\t\tlet newFoundSelectors = [];\r\n\t\t\tlet newFoundCombinedSelectorsCount = 0;\r\n\t\t\tfor (let psi = 0; psi < parentNodeSelectors.possiblySelectors.length; psi++) {\r\n\t\t\t\tfor (let csi = 0; csi < results.possiblySelectors.length; csi++) {\r\n\t\t\t\t\tlet selectorText = `${parentNodeSelectors.possiblySelectors[psi].selector} > ${results.possiblySelectors[csi].selector}`;\r\n\t\t\t\t\tif (isSelectorValid(selectorText)) {\r\n\t\t\t\t\t\tnewFoundSelectors.push({ selector: selectorText, resultsOnThePage: document.querySelectorAll(selectorText).length });\r\n\t\t\t\t\t\tnewFoundCombinedSelectorsCount++;\r\n\t\t\t\t\t\tif (newFoundCombinedSelectorsCount > 15)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (newFoundCombinedSelectorsCount > 15)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (let nfs = 0; nfs < newFoundSelectors.length; nfs++) {\r\n\t\t\t\tresults.possiblySelectors.push(newFoundSelectors[nfs]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Get parent -> child selectors (second parent) */\r\n\t\tif (NodeLink.parentElement && NodeLink.parentElement.parentElement && LookAtTopNode === true) { \r\n\t\t\tlet parentNode = NodeLink.parentElement.parentElement;\r\n\t\t\tlet parentNodeSelectors = GetElementCSSSelector(parentNode, false);\r\n\t\t\tlet newFoundSelectors = [];\r\n\t\t\tlet newFoundCombinedSelectorsCount = 0;\r\n\t\t\tfor (let psi = 0; psi < parentNodeSelectors.possiblySelectors.length; psi++) {\r\n\t\t\t\tfor (let csi = 0; csi < results.possiblySelectors.length; csi++) {\r\n\t\t\t\t\tlet selectorText = `${parentNodeSelectors.possiblySelectors[psi].selector} > ${results.possiblySelectors[csi].selector}`; \r\n\t\t\t\t\tif (isSelectorValid(selectorText)) {\r\n\t\t\t\t\t\tlet resultsOnThePageCount = document.querySelectorAll(selectorText).length;\r\n\t\t\t\t\t\tif (resultsOnThePageCount === 1) {\r\n\t\t\t\t\t\t\tnewFoundSelectors.push({ selector: selectorText, resultsOnThePage: resultsOnThePageCount });\r\n\t\t\t\t\t\t\tnewFoundCombinedSelectorsCount++;\r\n\t\t\t\t\t\t\tif (newFoundCombinedSelectorsCount > 15)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (newFoundCombinedSelectorsCount > 15)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (let nfs = 0; nfs < newFoundSelectors.length; nfs++) {\r\n\t\t\t\tresults.possiblySelectors.push(newFoundSelectors[nfs]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Sort selectors by occurences count */\r\n\t\tresults.possiblySelectors.sort(compare);\r\n\t\t\r\n\t\t/* Check for null selector */\r\n\t\tif (results.calculatedSelector === '')\r\n\t\t\tif (results.possiblySelectors.length > 0)\r\n\t\t\t{\r\n\t\t\t\tresults.calculatedSelector = results.possiblySelectors[0].selector;\r\n\t\t\t\tresults.calculatedSelector_resultsOnThePage = results.possiblySelectors[0].resultsOnThePage;\r\n\t\t\t}\r\n\t\t  \r\n\t\t/* Check for forced selector */\r\n\t\tif (forcedCSSSelector && typeof forcedCSSSelector !== 'undefined') {\r\n\t\t\tresults.calculatedSelector = forcedCSSSelector;\r\n\t\t\tresults.calculatedSelector_resultsOnThePage = document.querySelectorAll(forcedCSSSelector).length;\r\n\t\t\t\r\n\t\t\tlet isSelectorAddedIntoPossiblySelectors = false;\r\n\t\t\tfor (let qs = 0; qs < results.possiblySelectors.length; qs++) {\r\n\t\t\t\tif (results.possiblySelectors[qs].selector === forcedCSSSelector) {\r\n\t\t\t\t\tisSelectorAddedIntoPossiblySelectors = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!isSelectorAddedIntoPossiblySelectors) {\r\n\t\t\t\tresults.possiblySelectors.push({\r\n\t\t\t\t\tselector: forcedCSSSelector,\r\n\t\t\t\t\tresultsOnThePage: results.calculatedSelector_resultsOnThePage\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Try to fetch one unique selector */\r\n\t\treturn results;\r\n\t}\r\n\t\r\n\t/* Unlight all picked nodes on the page */\r\n\tfunction unlightAllPickedNodesBySpecifiedSelector() {\r\n\t\tlet docLightedNodes = document.querySelectorAll(`[de-picked-node-samenodes-area]`);\r\n\t\tfor (let pni = 0; pni < docLightedNodes.length; pni++) {\r\n\t\t\tdocLightedNodes[pni].removeAttribute('de-picked-node-samenodes-area');\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Light all picked nodes by specified selector */\r\n\tfunction lightPickedNodeBySpecifiedSelector(nodeSelectorNr) {\r\n\t\tnodeSelectorNr.setAttribute('de-picked-node-samenodes-area', '');\r\n\t}\r\n\t\r\n\t/* Prepare node HTML content before textarea displaying */\r\n\tfunction prepareNodeHTMLBeforeTextareaDisplaying(NodeHTMLText) {\r\n\t\r\n\t\tlet newVirtualNode = document.createElement('div');\r\n\t\tnewVirtualNode.innerHTML = NodeHTMLText;\r\n\t\t\r\n\t\tlet lightedElements = newVirtualNode.querySelectorAll(`[data-de-lighted-element]`);\r\n\t\tfor (let le = 0; le < lightedElements.length; le++)\r\n\t\t\tlightedElements[le].removeAttribute('data-de-lighted-element');\r\n\t\t\r\n\t\tlet ignoreHoverElements = newVirtualNode.querySelectorAll(`[data-ignorehover]`);\r\n\t\tfor (let le = 0; le < ignoreHoverElements.length; le++)\r\n\t\t\tignoreHoverElements[le].removeAttribute('data-ignorehover');\r\n\t\t\r\n\t\tlet likedGUIDElements = newVirtualNode.querySelectorAll(`[data-linkedguid]`);\r\n\t\tfor (let le = 0; le < likedGUIDElements.length; le++)\r\n\t\t\tlikedGUIDElements[le].removeAttribute('data-linkedguid');\r\n\t\t\r\n\t\tlet tempPickedElements = newVirtualNode.querySelectorAll(`[data-temppicked]`);\r\n\t\tfor (let le = 0; le < tempPickedElements.length; le++)\r\n\t\t\ttempPickedElements[le].removeAttribute('data-temppicked');\r\n\t\t\r\n\t\tNodeHTMLText = newVirtualNode.innerHTML;\r\n\t\tNodeHTMLText = NodeHTMLText.trim();\r\n\t\treturn NodeHTMLText;\r\n\t}\r\n\t\r\n\t/* Remove all temp-picked elements */\r\n\tfunction removeAllTempPickedElements() {\r\n\t\tlet pickedButNotConfirmedElements = document.querySelectorAll(`[data-temppicked]`);\r\n\t\tfor (let pnce = 0; pnce < pickedButNotConfirmedElements.length; pnce++) {\r\n\t\t\t \r\n\t\t\tpickedButNotConfirmedElements[pnce].removeAttribute('data-de-lighted-element');\r\n\t\t\tpickedButNotConfirmedElements[pnce].removeAttribute('data-ignorehover');\r\n\t\t\tpickedButNotConfirmedElements[pnce].removeAttribute('data-linkedguid');\r\n\t\t\tpickedButNotConfirmedElements[pnce].removeAttribute('data-temppicked');\r\n\t\t\t \r\n\t\t\t/* Delete picked element head label */\r\n\t\t\tif (pickedButNotConfirmedElements[pnce].classList.contains('de-selected-element-number')) \r\n\t\t\t\tpickedButNotConfirmedElements[pnce].remove();\r\n\t\t\t\t\r\n\t\t\t/* Delete picked element expander-modal (highlighter) */\r\n\t\t\tif (pickedButNotConfirmedElements[pnce].classList.contains('de-elements-hightlighter'))\r\n\t\t\t\tpickedButNotConfirmedElements[pnce].remove();\r\n\t\t}\r\n\t}\r\n\t  \r\n\t/* Handle lighted element picked */\r\n\tfunction handleHTMLElementPicked(params) {\r\n\t  \r\n\t\t/* Handle params */\r\n\t\tlet insertedDocumentSelectorNR = window.dePageInspector.pagePickedElements.length + 1;\r\n\t\tlet selectorNumberParamsContext = (params && params.element_nr) ? params.element_nr : insertedDocumentSelectorNR;\r\n\t\tlet selectorNameParamsContext = (params && params.element_name) ? params.element_name : '';\r\n\t\tlet selectorGUIDParamsContext = (params && params.element_guid) ? params.element_guid : uuidv4();\r\n\t\t\r\n\t\t/* Close all expanded properties */\r\n\t\twindow.dePageInspector.collapseOpenedSelectorProperties();\r\n\t\t\r\n\t\t/* Hide current highlighter */\r\n\t\twindow.dePageInspector.elementsHighlighter.style.top = '-1000px';\r\n\t\twindow.dePageInspector.elementsHighlighter.style.left = '-1000px';\r\n\t  \r\n\t\t/* Remove other picked elements */\r\n\t\tremoveAllTempPickedElements();\r\n\t   \r\n\t\t/* Create new element lighter (static) */\r\n\t\tlet newElementFixedLighter = createAndInsertDocumentElementsSelector();\r\n\t\tnewElementFixedLighter.setAttribute('data-isbindedtonode', 'yes');\r\n\t\tnewElementFixedLighter.setAttribute('data-linkedguid', selectorGUIDParamsContext);\r\n\t\t\r\n\t\tif (!params || (params && params.addIntoPickedElements === false))\r\n\t\t\tnewElementFixedLighter.setAttribute('data-temppicked', 'yes');\r\n\t\t\r\n\t\t/* Create and insert top-label block */\r\n\t\tlet selectedElementTopLabelBlock = createAndInsertDocumentElementSelectorNumber(selectorNumberParamsContext, selectorNameParamsContext);\r\n\t\tadjustElementsTopLabel(selectedElementTopLabelBlock, window.dePageInspector.currentHoveredElementLink);\r\n\t\tif (!params || (params && params.addIntoPickedElements === false))\r\n\t\t\tselectedElementTopLabelBlock.setAttribute('data-temppicked', 'yes');\r\n\t\tselectedElementTopLabelBlock.setAttribute('data-linkedguid', selectorGUIDParamsContext);\r\n\t\t\r\n\t\t/* Fetch element selector */\r\n\t\tlet pickedElementCSSSelector = GetElementCSSSelector(window.dePageInspector.currentHoveredElementLink, true, (params ? params.forcedCSSSelector : null));\r\n\t\t\r\n\t\t/* Create container */\r\n\t\tlet pickedElementContainer = {\r\n\t\t\tpickedElementNr: selectorNumberParamsContext,\r\n\t\t\tpickedElementName: selectorNameParamsContext,\r\n\t\t\tpickedElementGUID: selectorGUIDParamsContext, \r\n\t\t\tpickedElement: window.dePageInspector.currentHoveredElementLink,\r\n\t\t\tpickedElementCalculatedSelector: pickedElementCSSSelector.calculatedSelector,\r\n\t\t\tpickedElementPossiblySelectors: pickedElementCSSSelector.possiblySelectors,\r\n\t\t\tassociatedHighlighter: newElementFixedLighter,\r\n\t\t\tselectedElementTopLabelBlock: selectedElementTopLabelBlock,\r\n\t\t\thandle_as_picture: (params && params.handle_as_picture) ? true : false,\r\n\t\t\thandle_as_picture_srctag: ''\r\n\t\t};\r\n\t\t\r\n\t\tif (params && params.addIntoPickedElements === true)\r\n\t\t\twindow.dePageInspector.pagePickedElements.push(pickedElementContainer);\r\n\t\t\r\n\t\tif (params && params.showExpanderButton === true)\r\n\t\t\tselectedElementTopLabelBlock.querySelector(`.expand-collapse-details`).classList.remove('de-hidden');\r\n\t\t\r\n\t\t/* Make element insensitive to re-hover */\r\n\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-ignorehover', 'true');\r\n\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-linkedguid', pickedElementContainer.pickedElementGUID);\r\n\t\t\r\n\t\tif (!params || (params && params.addIntoPickedElements === false))\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-temppicked', 'yes');\r\n\t\t\r\n\t\t/* Set hightlighter textarea content */\r\n\t\tlet elementOuterHTML = window.dePageInspector.currentHoveredElementLink.outerHTML;\r\n\t\telementOuterHTML = prepareNodeHTMLBeforeTextareaDisplaying(elementOuterHTML); \r\n\t\tnewElementFixedLighter.querySelector(`[data-role='highlighter-nodecode-textarea']`).value = elementOuterHTML;\r\n\t\t\r\n\t\t/* Set highlighter input - inner text data */\r\n\t\tif (window.dePageInspector.currentHoveredElementLink.innerText) {\r\n\t\t\tlet elementInnerText = window.dePageInspector.currentHoveredElementLink.innerText.trim();\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='highlighter-nodetext-input']`).value = elementInnerText;\r\n\t\t}\r\n\t\t\r\n\t\t/* Try to get image details */\r\n\t\tif (pickedElementContainer.handle_as_picture === true) {\r\n\t\t\t\r\n\t\t\tlet paramsSrcAttribute = (params && params.handle_as_picture_srctag) ? window.dePageInspector.currentHoveredElementLink.getAttribute(params.handle_as_picture_srctag) : '';\r\n\t\t\tlet srcAttribute = window.dePageInspector.currentHoveredElementLink.getAttribute('src');\r\n\t\t\tlet srcsetAttribute = window.dePageInspector.currentHoveredElementLink.getAttribute('srcset');\r\n\t\t\tlet svg_xlinkhref_Attribute = window.dePageInspector.currentHoveredElementLink.getAttribute('xlink:href');\r\n\t\t\tlet backgroundImageAttribute = ((window.dePageInspector.currentHoveredElementLink.style && window.dePageInspector.currentHoveredElementLink.style.backgroundImage) ? window.dePageInspector.currentHoveredElementLink.style.backgroundImage : '');\r\n\t\t\t\r\n\t\t\tif (srcAttribute !== '' || srcsetAttribute !== '' || backgroundImageAttribute !== '' || svg_xlinkhref !== '' || paramsSrcAttribute !== '') {\r\n\t\t\t\t\r\n\t\t\t\tlet endPointSrcAttributeValue = '';\r\n\t\t\t\tif (paramsSrcAttribute !== '') {\r\n\t\t\t\t\t/* source tag from params */\r\n\t\t\t\t\tendPointSrcAttributeValue = paramsSrcAttribute;\r\n\t\t\t\t\tpickedElementContainer.handle_as_picture_srctag = params.handle_as_picture_srctag;\r\n\t\t\t\t}\r\n\t\t\t\telse if (srcAttribute !== '') {\r\n\t\t\t\t\t/* src='...' source */\r\n\t\t\t\t\tendPointSrcAttributeValue = srcAttribute;\r\n\t\t\t\t\tpickedElementContainer.handle_as_picture_srctag = 'src';\r\n\t\t\t\t}\r\n\t\t\t\telse if (srcsetAttribute !== '') {\r\n\t\t\t\t\t/* srcset='...' source */\r\n\t\t\t\t\tlet srcsetValue = srcsetAttribute;\r\n\t\t\t\t\tlet srcsetFirstWhitespace = srcsetValue.indexOf(' ');\r\n\t\t\t\t\tif (srcsetFirstWhitespace !== -1)\r\n\t\t\t\t\t\tsrcsetValue = srcsetValue.substring(0, srcsetFirstWhitespace);\r\n\t\t\t\t\t\r\n\t\t\t\t\tendPointSrcAttributeValue = srcsetValue;\r\n\t\t\t\t\tpickedElementContainer.handle_as_picture_srctag = 'srcset';\r\n\t\t\t\t}\r\n\t\t\t\telse if (backgroundImageAttribute !== '') {\r\n\t\t\t\t\t/* background-image:'...' source */\r\n\t\t\t\t\tendPointSrcAttributeValue = backgroundImageAttribute;\r\n\t\t\t\t\tpickedElementContainer.handle_as_picture_srctag = 'style|background-image';\r\n\t\t\t\t}\r\n\t\t\t\telse if (svg_xlinkhref !== '') {\r\n\t\t\t\t\t/* xlink:href='...' source */\r\n\t\t\t\t\tendPointSrcAttributeValue = svg_xlinkhref_Attribute;\r\n\t\t\t\t\tpickedElementContainer.handle_as_picture_srctag = 'xlink:href';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/* Change &amp; to & */\r\n\t\t\t\tendPointSrcAttributeValue = endPointSrcAttributeValue.replaceAll('&amp;', '&');\r\n\t\t\t\t\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.node-handled-as-image`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example-label']`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example']`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example']`).setAttribute('src', endPointSrcAttributeValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.node-handled-as-image`).classList.add('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example-label']`).classList.add('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example']`).classList.add('de-hidden');\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnewElementFixedLighter.querySelector(`.node-handled-as-image`).classList.add('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example-label']`).classList.add('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-element-image-example']`).classList.add('de-hidden');\r\n\t\t}\r\n\t\t\r\n\t\t/* Adjust already picked elements position */\r\n\t\tcorrectAllLightedElementsPositions();\r\n\t\t  \r\n\t\t/* Remove helping label */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='click-on-plus-or-press-enter']`).remove(); \r\n\t\t\r\n\t\t/* Complete 'Possibly css selectors' dropdown */\r\n\t\tlet possiblySelectorsOptionsDropdownContentHTML = '';\r\n\r\n\t\tfor (let psc = 0; psc < pickedElementCSSSelector.possiblySelectors.length; psc++) {\r\n\t\t\tlet selectorValueQuotationProtected = pickedElementCSSSelector.possiblySelectors[psc].selector.replaceAll(quotationCharacter_double, 'DOUBLE_QUOTE');\r\n\t\t\tselectorValueQuotationProtected = pickedElementCSSSelector.possiblySelectors[psc].selector.replaceAll(quotationCharacter_single, 'DOUBLE_QUOTE');\r\n\t\t\tlet selectorPreparedTextContent = pickedElementCSSSelector.possiblySelectors[psc].selector.replaceAll(quotationCharacter_single, quotationCharacter_double);\r\n\t\t\tif (selectorPreparedTextContent.length > 50)\r\n\t\t\t\tselectorPreparedTextContent = selectorPreparedTextContent.substr(0, 50) + '...';\r\n\t\t\tpossiblySelectorsOptionsDropdownContentHTML += `<option value='${selectorValueQuotationProtected}'>[${pickedElementCSSSelector.possiblySelectors[psc].resultsOnThePage} on the page] ${selectorPreparedTextContent}</option>`;\r\n\t\t}\r\n\t\t\r\n\t\t/* Hide unnecessary buttons, show neede buttons */\t\t\r\n\t\tnewElementFixedLighter.querySelector(`.de-highlighter-top-buttons`).classList.add('de-hidden');\r\n\t\tnewElementFixedLighter.querySelector('.de-highlighter-bottom-buttons').classList.remove('de-hidden');\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='css-selectors-variants']`).innerHTML = possiblySelectorsOptionsDropdownContentHTML;\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='de-highlighter-css-selectors-picker']`).classList.remove('de-hidden');\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='de-highlighter-picked-selector-value']`).classList.remove('de-hidden');\r\n\t\tnewElementFixedLighter.querySelector(`.de-highlighter-top-buttons-two`).classList.remove('de-hidden');\r\n\t\t\r\n\t\t/* Check for img child nodes */ \r\n\t\tlet forceBottomButtonsTwoVisiblity = false;\r\n\t\tif (elementOuterHTML.indexOf('<img') !== -1 || elementOuterHTML.indexOf('<image') !== -1) { \r\n\t\t\t \r\n\t\t\tlet isAlreadyHandlesAsImageNode = (params && params.handle_as_picture === true); \r\n\t\t\tif (!isAlreadyHandlesAsImageNode) {\r\n\t\t\t\t\r\n\t\t\t\tforceBottomButtonsTwoVisiblity = true;\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.images-detected-into-selected-node`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).classList.remove('de-hidden');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/* Node handled as 'Image node', remove unnecessary Jump button */\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.images-detected-into-selected-node`).classList.add('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.add('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).classList.add('de-hidden');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} \r\n\t\telse {\r\n\t\t\tnewElementFixedLighter.querySelector(`.images-detected-into-selected-node`).classList.add('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.add('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).classList.add('de-hidden');\r\n\t\t}\r\n\r\n\t\t\r\n\t\t/* Check results on the page */\r\n\t\tif (pickedElementCSSSelector.calculatedSelector_resultsOnThePage > 1) {\r\n\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.remove('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`.multiple-elements-found-with-this-selector`).classList.remove('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).classList.remove('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).innerHTML = `Show/Hide all nodes (${pickedElementCSSSelector.calculatedSelector_resultsOnThePage})`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).classList.add('de-hidden');\r\n\t\t\tnewElementFixedLighter.querySelector(`.multiple-elements-found-with-this-selector`).classList.add('de-hidden');\r\n\t\t\tif (!forceBottomButtonsTwoVisiblity)\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.add('de-hidden');\r\n\t\t}\r\n\t\t \r\n\t\t/* Check element for child nodes */\r\n\t\tlet pickedElementChildNodes = pickedElementContainer.pickedElement.childNodes;\r\n\t\tlet isElementContainChilds = false;\r\n\t\tfor (let ech = 0; ech < pickedElementChildNodes.length; ech++) {\r\n\t\t\tlet childNode_NodeName = pickedElementChildNodes[ech].nodeName;\r\n\t\t\tif (childNode_NodeName === '#text' || childNode_NodeName === '#comment' || childNode_NodeName === '#cdata-section' || childNode_NodeName === '#document' || childNode_NodeName === '#document-fragment') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tisElementContainChilds = true;\r\n\t\t}\r\n\t\tif (!isElementContainChilds) \r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='go-child']`).setAttribute('data-disabled', 'yes');\r\n\t\t\r\n\t\t/* Bind 'Change' event on 'Variants of CSS selector' */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='css-selectors-variants']`).addEventListener('change', event => {\r\n\t\t\tlet selectedOptionIndex = newElementFixedLighter.querySelector(`[data-role='css-selectors-variants']`).selectedIndex;\r\n\t\t\tlet selectedOptionValue = newElementFixedLighter.querySelector(`[data-role='css-selectors-variants']`).options[selectedOptionIndex].value;\r\n\t\t\tselectedOptionValue = selectedOptionValue.replaceAll('DOUBLE_QUOTE', quotationCharacter_double);\r\n\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).value = selectedOptionValue;\r\n\t\t\t\r\n\t\t\tlet elementsOnThePageCount = document.querySelectorAll(selectedOptionValue);\r\n\t\t\tif (elementsOnThePageCount.length > 1) {\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.multiple-elements-found-with-this-selector`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.remove('de-hidden');\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).classList.remove('de-hidden');\t\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).innerHTML = `Show/Hide all nodes (${elementsOnThePageCount.length})`;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet isImageNodeHidden = (newElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).classList.contains('de-hidden'));\r\n\t\t\t\tif (isImageNodeHidden) {\r\n\t\t\t\t\tnewElementFixedLighter.querySelector(`.de-highlighter-bottom-buttons-two`).classList.add('de-hidden');\r\n\t\t\t\t\tnewElementFixedLighter.querySelector(`.multiple-elements-found-with-this-selector`).classList.add('de-hidden');\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).classList.add('de-hidden');\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t/* Re-pick element on page behavior - disable all buttons after selector change */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).addEventListener('keydown', event => { \r\n\t\t\tnewElementFixedLighter.setAttribute('de-need-to-update-selector', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='go-parent']`).setAttribute('data-disabled', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='go-child']`).setAttribute('data-disabled', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).setAttribute('data-disabled', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).setAttribute('data-disabled', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='save-selector']`).setAttribute('data-disabled', 'yes');\r\n\t\t\tnewElementFixedLighter.querySelector(`[data-role='re-pick-element-on-page']`).classList.remove('de-hidden');\r\n\t\t});\r\n\t\t  \r\n\t\t/* Fill CSS selector textbox */\r\n\t\tlet selectorValueQuotationProtectedDirect = pickedElementContainer.pickedElementCalculatedSelector; \r\n\t\tselectorValueQuotationProtectedDirect = selectorValueQuotationProtectedDirect.replaceAll(quotationCharacter_single, quotationCharacter_double);\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).value = selectorValueQuotationProtectedDirect;\r\n\t\t\r\n\t\t/* Subscribe mouseenter event */  \r\n\t\tpickedElementContainer.selectedElementTopLabelBlock.addEventListener('mouseenter', function(event) {\r\n\t\t\twindow.dePageInspector.blindElementsOtherThanSelected(pickedElementContainer.pickedElementGUID);\r\n\t\t});  \r\n\t\tnewElementFixedLighter.addEventListener('mouseenter', function(event) {\r\n\t\t\twindow.dePageInspector.blindElementsOtherThanSelected(pickedElementContainer.pickedElementGUID);\r\n\t\t}); \r\n\t\r\n\t\t/* Subscribe mouseleave event */ \r\n\t\tpickedElementContainer.selectedElementTopLabelBlock.addEventListener('mouseleave', function(event) { \r\n\t\t\twindow.dePageInspector.unblindAllElements();\r\n\t\t});  \r\n\t\tnewElementFixedLighter.addEventListener('mouseleave', function(event) { \r\n\t\t\twindow.dePageInspector.unblindAllElements();\r\n\t\t});  \r\n\t\t\r\n\t\t/* Subscribe details block mouseleave event */\r\n\t\tnewElementFixedLighter.addEventListener('mouseleave', function(event) { \r\n\t\t\t/* newElementFixedLighter.classList.add('de-hidden'); */\r\n\t\t});\r\n\t\t\r\n\t\t/* Hide selector if necessary */\r\n\t\tif (params && params.expand_details === false) {\r\n\t\t\tnewElementFixedLighter.classList.add('de-hidden');\r\n\t\t}\r\n\t\t\r\n\t\t/* Reset element lighted */\r\n\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-de-lighted-element', '');\r\n\t\t\r\n\t\t/* Adjust picker positioning */\r\n\t\tadjustElementsHighlighter(newElementFixedLighter, window.dePageInspector.currentHoveredElementLink, 'picked');\r\n\t\t\r\n\t\t/* Set hovered element to null */\r\n\t\twindow.dePageInspector.currentHoveredElementLink = null;\r\n\t\t\r\n\t\t/* ------------------------------------------------------------- */\r\n\t\t/* ----------------- SUBSCRIBE BUTTONS CLICKING ---------------- */\r\n\t\t/* ------------------------------------------------------------- */\r\n\t\t\r\n\t\t/* Subscribe Expand/Collapse button behavior */\r\n\t\tlet expand_collapse_button_link = selectedElementTopLabelBlock.querySelector(`[data-role='expand-collapse-details']`);\r\n\t\texpand_collapse_button_link.addEventListener('click', event => { \r\n\t\t\tlet isExpanded = expand_collapse_button_link.getAttribute('de-expanded');\r\n\t\t\tif (!isExpanded || isExpanded === null || isExpanded === '') {\r\n\t\t\t\twindow.dePageInspector.expandSelectorProperties(pickedElementContainer.pickedElementGUID, params);\r\n\t\t\t\t\r\n\t\t\t\tlet eventData = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'node_data_expanded', 'event_data': { 'guid': '${pickedElementContainer.pickedElementGUID}' } } }`;\r\n\t\t\t\tconsole.log(eventData);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twindow.dePageInspector.collapseOpenedSelectorProperties();\r\n\t\t\t\t\r\n\t\t\t\tlet eventData = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'node_data_collapsed', 'event_data': { 'guid': '${pickedElementContainer.pickedElementGUID}' } } }`;\r\n\t\t\t\tconsole.log(eventData);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t/* Subscribe 'Go parent' */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='go-parent']`).addEventListener('click', event => { \r\n\t\t\tlet elementNode = pickedElementContainer.pickedElement;\r\n\t\t\tlet elementParent = elementNode.parentElement;\r\n\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, false);\r\n\t\t\telementParent.setAttribute('data-de-lighted-element', '');\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink = elementParent; \r\n\t\t\tif (params) {\r\n\t\t\t\tparams.expand_details = true;\r\n\t\t\t\tdelete params.forcedCSSSelector;\r\n\t\t\t\tdelete params.handle_as_picture;\r\n\t\t\t}  \r\n\t\t\thandleHTMLElementPicked(params);\r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t});\r\n\t\t\r\n\t\t/* Subscribe 'Go child' */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='go-child']`).addEventListener('click', event => { \r\n\t\t\tlet isDisabledToGoChild = newElementFixedLighter.querySelector(`[data-role='go-child']`).getAttribute('data-disabled');\r\n\t\t\tif (isDisabledToGoChild === 'yes')\r\n\t\t\t\treturn;\r\n\t\t\r\n\t\t\tlet foundElementFirstChild = null;\r\n\t\t\tlet elementNode = pickedElementContainer.pickedElement;\r\n\t\t\tlet elementChilds = elementNode.childNodes; \r\n\t\t\tfor (let ech = 0; ech < elementChilds.length; ech++) {\r\n\t\t\t\tlet childNode_NodeName = elementChilds[ech].nodeName;\r\n\t\t\t\tif (childNode_NodeName === '#text' || childNode_NodeName === '#comment' || childNode_NodeName === '#cdata-section' || childNode_NodeName === '#document' || childNode_NodeName === '#document-fragment') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfoundElementFirstChild = elementChilds[ech];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t  \r\n\t\t\tif (foundElementFirstChild) {\r\n\t\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, false);\r\n\t\t\t\tfoundElementFirstChild.setAttribute('data-de-lighted-element', '');\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink = foundElementFirstChild;\r\n\t\t\t\tif (params) {\r\n\t\t\t\t\tparams.expand_details = true;\r\n\t\t\t\t\tdelete params.forcedCSSSelector;\r\n\t\t\t\t\tdelete params.handle_as_picture;\r\n\t\t\t\t}\r\n\t\t\t\thandleHTMLElementPicked(params);\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/* Handle click on 'Re-pick element' button */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='re-pick-element-on-page']`).addEventListener('click', event => {\r\n\t\t\tlet newSelector = newElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).value;\r\n\r\n\t\t\t/* Check elements count on the page */\r\n\t\t\tlet elementsCountOnThePage = document.querySelectorAll(newSelector);\r\n\t\t\tif (elementsCountOnThePage.length === 0) {\r\n\t\t\t\talert('Cannot find elements with such selector on the page. Please, try another selector.');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (params) {\r\n\t\t\t\tparams.expand_details = true;\r\n\t\t\t\tdelete params.forcedCSSSelector;\r\n\t\t\t\tdelete params.handle_as_picture;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tparams = {};\r\n\r\n\t\t\t/* Repick element */\r\n\t\t\tparams.forcedCSSSelector = newSelector;\r\n\t\t\tparams.addIntoPickedElements = false;\r\n\t\t\t\r\n\t\t\tlet documentElementUnderSelector = document.querySelector(newSelector);\r\n\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, true);\r\n\t\t\tdocumentElementUnderSelector.setAttribute('data-de-lighted-element', '');\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink = documentElementUnderSelector;\r\n\t\t\t\r\n\t\t\thandleHTMLElementPicked(params);\r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t});\r\n\r\n\t\t/* Subscribe 'Jump to image node' button */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='jump-to-image-node']`).addEventListener('click', event => {\r\n\t\t\t\r\n\t\t\t/* Get all image tags */\r\n\t\t\tlet allImageNodes_imgTag = pickedElementContainer.pickedElement.querySelectorAll(`img`); \r\n\t\t\tlet allImageNodes_imageTagSVG = pickedElementContainer.pickedElement.querySelectorAll(`image`); \r\n\t\t\t\r\n\t\t\tif (allImageNodes_imgTag.length === 0 && allImageNodes_imageTagSVG.length === 0) {\r\n\t\t\t\t/* Try pick nodes itself */\r\n\t\t\t\tif (pickedElementContainer.pickedElement.tagName.toLowerCase() === 'img')\r\n\t\t\t\t\tallImageNodes_imgTag = [ pickedElementContainer.pickedElement ];\r\n\t\t\t\tif (pickedElementContainer.pickedElement.tagName.toLowerCase() === 'image')\r\n\t\t\t\t\tallImageNodes_imageTagSVG = [ pickedElementContainer.pickedElement ];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Jump to image node (try <IMG> tag) */\r\n\t\t\tif (allImageNodes_imgTag.length > 0) {\r\n\t\t\t\tlet firstImageNode = allImageNodes_imgTag[0];\r\n\r\n\t\t\t\tif (params) {\r\n\t\t\t\t\tparams.expand_details = true;\r\n\t\t\t\t\tdelete params.forcedCSSSelector;\r\n\t\t\t\t\tparams.handle_as_picture = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tparams = { \r\n\t\t\t\t\t\thandle_as_picture: true \r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, false);\r\n\t\t\t\tfirstImageNode.setAttribute('data-de-lighted-element', '');\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink = firstImageNode;\r\n\t\t\t\thandleHTMLElementPicked(params);\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t}\r\n\t\t\telse if (allImageNodes_imageTagSVG.length > 0) {\r\n\t\t\t\t/* Jump to image node (try <IMAGE> tag) */\r\n\t\t\t\tlet firstImageNode = allImageNodes_imageTagSVG[0];\r\n\r\n\t\t\t\tif (params) {\r\n\t\t\t\t\tparams.expand_details = true;\r\n\t\t\t\t\tdelete params.forcedCSSSelector;\r\n\t\t\t\t\tparams.handle_as_picture = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tparams = { \r\n\t\t\t\t\t\thandle_as_picture: true \r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, false);\r\n\t\t\t\tfirstImageNode.setAttribute('data-de-lighted-element', '');\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink = firstImageNode;\r\n\t\t\t\thandleHTMLElementPicked(params);\r\n\t\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/* Subscribe click on 'Show/Hide elements on the page' button */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='find-elements-button']`).addEventListener('click', event => {\r\n\t\t\tif (document.querySelectorAll(`[de-picked-node-samenodes-area]`).length > 0) {\r\n\t\t\t\tunlightAllPickedNodesBySpecifiedSelector();\r\n\t\t\t\tsetTimeout(function() { correctAllLightedElementsPositions(); }, 100); \r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet actualSelector = newElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).value;\r\n\t\t\t\tlet nodesOnThePage = document.querySelectorAll(actualSelector);\r\n\t\t\t\tunlightAllPickedNodesBySpecifiedSelector();\r\n\t\t\t\tfor (let pns = 0; pns < nodesOnThePage.length; pns++) {\r\n\t\t\t\t\tlet nextPickedNode = nodesOnThePage[pns];\r\n\t\t\t\t\tif (nextPickedNode.getAttribute('data-ignorehover'))\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tlightPickedNodeBySpecifiedSelector(nextPickedNode);\r\n\t\t\t\t}\r\n\t\t\t\tsetTimeout(function() { correctAllLightedElementsPositions(); }, 100); \r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/* Subscribe 'Save' button */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='save-selector']`).addEventListener('click', event => { \r\n\t\t\r\n\t\t\t/* Check data-disabled issue */\r\n\t\t\tif (newElementFixedLighter.querySelector(`[data-role='save-selector']`).getAttribute('data-disabled') === 'yes')\r\n\t\t\t\treturn;\r\n\t\t\t\t\r\n\t\t\t/* Get newest selector from the textarea, validate selector */\r\n\t\t\tlet selectorValueFromTextArea = newElementFixedLighter.querySelector(`[data-role='picked-selector-value-input']`).value;\r\n\t\t\tif (selectorValueFromTextArea.indexOf(`'`) !== -1) {\r\n\t\t\t\talert(`Cannot save selector with ' character. Please use another quotation character.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tpickedElementContainer.pickedElementCalculatedSelector = selectorValueFromTextArea;\r\n\t\t\r\n\t\t\t/* Push element into found elements list */\r\n\t\t\twindow.dePageInspector.pagePickedElements.push(pickedElementContainer);\r\n\t\t\r\n\t\t\t/* Generate event into console (send data to parent application) */ \r\n\t\t\tnewElementFixedLighter.classList.add('de-hidden');\r\n\t\t\texpand_collapse_button_link.removeAttribute('de-expanded');\r\n\t\t\texpand_collapse_button_link.classList.remove('de-hidden');\r\n\t\t\texpand_collapse_button_link.innerHTML = 'Expand';\r\n\t\t\tif (window.dePageInspector.currentHoveredElementLink)\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink.removeAttribute('data-temppicked');\r\n\t\t\tnewElementFixedLighter.removeAttribute('data-temppicked');\r\n\t\t\tselectedElementTopLabelBlock.removeAttribute('data-temppicked');\r\n\t\t\tpickedElementContainer.pickedElement.removeAttribute('data-temppicked');\r\n\t\t\t\r\n\t\t\t/* Drop event into console */\r\n\t\t\tlet dataToOuterTransfer = `{ 'pickedElementGUID': '${pickedElementContainer.pickedElementGUID}', 'element_css_selector': '${selectorValueFromTextArea}', 'handle_as_picture': '${pickedElementContainer.handle_as_picture}', 'handle_as_picture_srctag': '${pickedElementContainer.handle_as_picture_srctag}' }`; \r\n\t\t\tlet eventMessageText = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'html_node_saved', 'event_data': ${dataToOuterTransfer} } }`;\r\n\t\t\tconsole.log(eventMessageText); \r\n\t\t});\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='save-selector']`).classList.remove('de-hidden');\r\n\r\n\t\t/* Subscribe 'Remove' button */\r\n\t\tnewElementFixedLighter.querySelector(`[data-role='remove-element-button']`).addEventListener('click', event => {\r\n\t\t\tremoveSelectorFromElement(pickedElementContainer.pickedElementGUID, true);\r\n\t\t});\r\n\t}\r\n\t  \r\n\t/* Expand selector properties window */\r\n\twindow.dePageInspector.expandSelectorProperties = function(picked_element_guid, params) { \r\n\t\tfor (let qx = 0; qx < window.dePageInspector.pagePickedElements.length; qx++) {\r\n\t\t\tif (window.dePageInspector.pagePickedElements[qx].pickedElementGUID === picked_element_guid) {\r\n\t\t\t\tremoveAllTempPickedElements();\r\n\t\t\t\twindow.dePageInspector.collapseOpenedSelectorProperties();\r\n\t\t\t\tlet expand_collapse_button_link = window.dePageInspector.pagePickedElements[qx].selectedElementTopLabelBlock.querySelector(`[data-role='expand-collapse-details']`);\r\n\t\t\t\texpand_collapse_button_link.setAttribute('de-expanded', 'yes');\r\n\t\t\t\texpand_collapse_button_link.innerHTML = 'Collapse';\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[qx].associatedHighlighter.classList.remove('de-hidden'); \r\n\t\t\t\tadjustElementsHighlighter(window.dePageInspector.pagePickedElements[qx].associatedHighlighter, window.dePageInspector.pagePickedElements[qx].pickedElement, 'picked');\r\n\t\t\t\twindow.dePageInspector.blindElementsOtherThanSelected(picked_element_guid);\r\n\t\t\t\twindow.dePageInspector.actualExpandedElement = window.dePageInspector.pagePickedElements[qx].pickedElement;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Collapse specified selector properties */\r\n\twindow.dePageInspector.collapseOpenedSelectorProperties = function() { \r\n\t\r\n\t\tlet allLabelElements = document.querySelectorAll(`.de-selected-element-number`);\r\n\t\tfor (let ae = 0; ae < allLabelElements.length; ae++) {\r\n\t\t\tlet associatedNodeGUID = allLabelElements[ae].getAttribute('data-linkedguid');\r\n\t\t\t\r\n\t\t\tlet elementAssociatedLighter = null;\r\n\t\t\tlet elementAssociatedNode = null;\r\n\t\t\t\r\n\t\t\tfor (let qx = 0; qx < window.dePageInspector.pagePickedElements.length; qx++) { \r\n\t\t\t\tif (window.dePageInspector.pagePickedElements[qx].pickedElementGUID === associatedNodeGUID) {\r\n\t\t\t\t\telementAssociatedLighter = window.dePageInspector.pagePickedElements[qx].associatedHighlighter;\r\n\t\t\t\t\telementAssociatedNode = window.dePageInspector.pagePickedElements[qx].pickedElement;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet ExpandedNodeButtonLink = allLabelElements[ae].querySelector(`[data-role='expand-collapse-details'][de-expanded='yes']`);\r\n\t\t\tif(ExpandedNodeButtonLink) {\r\n\t\t\t\tExpandedNodeButtonLink.removeAttribute('de-expanded');\r\n\t\t\t\tExpandedNodeButtonLink.innerHTML = 'Expand';\r\n\t\t\t\t\r\n\t\t\t\tif (elementAssociatedLighter)\r\n\t\t\t\t\telementAssociatedLighter.classList.add('de-hidden');\r\n\t\t\t\t\t\r\n\t\t\t\tif (elementAssociatedNode) {\r\n\t\t\t\t\t/* ... */\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t \r\n\t\twindow.dePageInspector.actualExpandedElement = null;\r\n\t\twindow.dePageInspector.unblindAllElements();\r\n\t}\r\n\t \r\n\t/* Unblind all elements */\r\n\twindow.dePageInspector.unblindAllElements = function() {\r\n\t\t\r\n\t\tif (window.dePageInspector.actualExpandedElement !== null)\r\n\t\t\treturn;\r\n\t\r\n\t\tfor (let tc = 0; tc < window.dePageInspector.pagePickedElements.length; tc++) {\r\n\t\t\twindow.dePageInspector.pagePickedElements[tc].pickedElement.removeAttribute('de-blinded');\r\n\t\t\twindow.dePageInspector.pagePickedElements[tc].associatedHighlighter.removeAttribute('de-blinded');\r\n\t\t\twindow.dePageInspector.pagePickedElements[tc].selectedElementTopLabelBlock.removeAttribute('de-blinded');\r\n\t\t}\r\n\t}\r\n\t\t\t \r\n\t/* Blind all elements other then element with specified GUID */\r\n\twindow.dePageInspector.blindElementsOtherThanSelected = function(picked_element_guid) {\r\n\t\tfor (let tc = 0; tc < window.dePageInspector.pagePickedElements.length; tc++) {\r\n\t\t\tif (window.dePageInspector.pagePickedElements[tc].pickedElementGUID !== picked_element_guid) {\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].pickedElement.setAttribute('de-blinded', '');\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].associatedHighlighter.setAttribute('de-blinded', '');\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].selectedElementTopLabelBlock.setAttribute('de-blinded', '');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].pickedElement.removeAttribute('de-blinded');\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].associatedHighlighter.removeAttribute('de-blinded');\r\n\t\t\t\twindow.dePageInspector.pagePickedElements[tc].selectedElementTopLabelBlock.removeAttribute('de-blinded');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (window.dePageInspector.currentHoveredElementLink)\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink.removeAttribute('data-de-lighted-element');\r\n\t\twindow.dePageInspector.elementsHighlighter.style.top = '-1000px';\r\n\t\twindow.dePageInspector.elementsHighlighter.style.left = '-1000px';\r\n\t}\r\n  \r\n\t/* Remove CSS selector from UI thread */\r\n\twindow.dePageInspector.deleteSelectorProperties = function(element_guid) {\r\n\t\tremoveSelectorFromElement(element_guid, true);\r\n\t}\r\n\t  \r\n\t/* Remove specified highlighted selector from picked element */\r\n\tfunction removeSelectorFromElement(pickedElementGUID, dropConsoleEvent) {\r\n\t\r\n\t\t/* Try to find picked element container into saved objects array, and if found - remove element */\r\n\t\tfor (let spi = 0; spi < window.dePageInspector.pagePickedElements.length; spi++) {\r\n\t\t\tif (window.dePageInspector.pagePickedElements[spi].pickedElementGUID === pickedElementGUID) {\r\n\t\t\t\twindow.dePageInspector.pagePickedElements.splice(spi,1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t/* Remove element */\r\n\t\tunlightAllPickedNodesBySpecifiedSelector(); /* ??? */\r\n\t\twindow.dePageInspector.unblindAllElements();\r\n\t\t\r\n\t\t/* Clear lighted element */\r\n\t\tlet lightedElement = document.querySelector(`[data-de-lighted-element][data-linkedguid='${pickedElementGUID}']`);\r\n\t\tif (lightedElement) {\r\n\t\t\tlightedElement.removeAttribute('data-ignorehover');\r\n\t\t\tlightedElement.removeAttribute('data-linkedguid');\r\n\t\t\tlightedElement.removeAttribute('data-de-lighted-element');\r\n\t\t}\r\n\t\t\r\n\t\t/* Remove label */\r\n\t\tlet labelElement = document.querySelector(`.de-selected-element-number[data-linkedguid='${pickedElementGUID}']`);\r\n\t\tif (labelElement)\r\n\t\t\tlabelElement.remove();\r\n\t\t\t \r\n\t\t/* Remove expander */\r\n\t\tlet expanderElement = document.querySelector(`.de-elements-hightlighter[data-linkedguid='${pickedElementGUID}']`);\r\n\t\tif (expanderElement)\r\n\t\t\texpanderElement.remove();\r\n\r\n\t\tif (dropConsoleEvent) {\r\n\t\t\tlet eventMessageText = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'html_node_removed', 'event_data': {'pickedElementGUID': '${pickedElementGUID}'} } }`;\r\n\t\t\tconsole.log(eventMessageText);\r\n\t\t}\r\n\t}\r\n\t  \r\n\t/* Initialize selectors function (ADD SELECTORS FROM UI - MULTIPLE) */\r\n\twindow.dePageInspector.initializeSelectors = function(selectorsListJSON) {\r\n\t \r\n\t\tlet selectorsPickResults = [];   \r\n\t\tlet selectorsListJSONParsed = JSON.parse(selectorsListJSON);   \r\n\t\tfor (let ear = 0; ear < selectorsListJSONParsed.length; ear++) {\r\n\t\t\t\r\n\t\t\tlet nextSelector = selectorsListJSONParsed[ear].element_css_selector;\r\n\t\t\tlet nextNr = selectorsListJSONParsed[ear].element_nr;\r\n\t\t\tlet nextGUID = selectorsListJSONParsed[ear].element_guid;\r\n\t\t\tlet nextName = selectorsListJSONParsed[ear].element_name;\r\n\t\t\tlet elementsBySelector = document.querySelectorAll(nextSelector);\r\n\t\t\tlet handle_as_picture = selectorsListJSONParsed[ear].handle_as_picture;\r\n\t\t\tlet handle_as_picture_srctag = selectorsListJSONParsed[ear].handle_as_picture_srctag;\r\n\t\t\t\r\n\t\t\tif (handle_as_picture === 'true') \r\n\t\t\t\thandle_as_picture = true;\r\n\t\t\telse\r\n\t\t\t\thandle_as_picture = false;\r\n\t\t\t\r\n\t\t\tif (elementsBySelector.length > 0) {\r\n\t\t\t\t\r\n\t\t\t\t//Get real element link\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink = elementsBySelector[0];\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-de-lighted-element', '');\r\n\t\t\t\t\r\n\t\t\t\t//Add exist element into picked nodes\r\n\t\t\t\thandleHTMLElementPicked({\r\n\t\t\t\t\taddIntoPickedElements: true,\r\n\t\t\t\t\tshowExpanderButton: true,\r\n\t\t\t\t\texpand_details: false, \r\n\t\t\t\t\telement_nr: nextNr,\r\n\t\t\t\t\telement_name: nextName,\r\n\t\t\t\t\telement_guid: nextGUID,\r\n\t\t\t\t\tforcedCSSSelector: nextSelector,\r\n\t\t\t\t\thandle_as_picture: handle_as_picture,\r\n\t\t\t\t\thandle_as_picture_srctag: handle_as_picture_srctag\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tselectorsPickResults.push(`{ 'element_guid': '${nextGUID}', 'page_addition_result': 'ok' }`);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\t//Add hidden element\r\n\t\t\t\tlet hiddenElement = document.createElement('div');\r\n\t\t\t\thiddenElement.classList.add('de-hidden');\r\n\t\t\t\thiddenElement.setAttribute('data-role', 'de-hidden-pseudo-element');\r\n\t\t\t\thiddenElement.setAttribute('data-elementguid', nextGUID);\r\n\t\t\t\tdocument.body.appendChild(hiddenElement);\r\n\t\t\t\twindow.dePageInspector.currentHoveredElementLink = hiddenElement;\r\n\t\t\t\t \r\n\t\t\t\t//Add pseudo-element into picked nodes\r\n\t\t\t\thandleHTMLElementPicked({ \r\n\t\t\t\t\taddIntoPickedElements: true,\r\n\t\t\t\t\tshowExpanderButton: true,\r\n\t\t\t\t\texpand_details: false, \r\n\t\t\t\t\telement_nr: nextNr,\r\n\t\t\t\t\telement_name: nextName,\r\n\t\t\t\t\telement_guid: nextGUID,\r\n\t\t\t\t\tforcedCSSSelector: nextSelector,\r\n\t\t\t\t\thandle_as_picture: handle_as_picture,\r\n\t\t\t\t\thandle_as_picture_srctag: handle_as_picture_srctag\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tselectorsPickResults.push(`{ 'element_guid': '${nextGUID}', 'page_addition_result': 'not_found' }`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Drop event to console */\r\n\t\tlet builtSelectorsString = selectorsPickResults.join(', ');\r\n\t\tlet eventMessageText = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'css_selectors_loaded', 'event_data': null, 'found_selectors': [ ${builtSelectorsString} ] } }`;\r\n\t\tconsole.log(eventMessageText); \r\n\t}\r\n\t\r\n\t/* Add selector from UI (SINGLE) */\r\n\twindow.dePageInspector.addSelectorFromUI = function(selectorData) {\r\n\t\r\n\t\tlet parsedSelectorData = JSON.parse(selectorData);   \r\n\t\t\r\n\t\tlet nextSelector = parsedSelectorData[ear].element_css_selector;\r\n\t\tlet nextNr = parsedSelectorData[ear].element_nr;\r\n\t\tlet nextGUID = parsedSelectorData[ear].element_guid;\r\n\t\tlet nextName = parsedSelectorData[ear].element_name;\r\n\t\tlet elementsBySelector = document.querySelectorAll(nextSelector);\r\n\t\tlet handle_as_picture = (selectorsListJSONParsed[ear].handle_as_picture === 'true' ? true : false);\r\n\t\tlet handle_as_picture_srctag = selectorsListJSONParsed[ear].handle_as_picture_srctag;\r\n\t\r\n\t\tlet selectorsPickResults = [];  \r\n\t\tif (elementsBySelector.length > 0) {\r\n\t\t\t\r\n\t\t\t//Get real element link\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink = elementsBySelector[0];\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink.setAttribute('data-de-lighted-element', '');\r\n\t\t\t\r\n\t\t\t//Add exist element into picked nodes\r\n\t\t\thandleHTMLElementPicked({ \r\n\t\t\t\taddIntoPickedElements: true,\r\n\t\t\t\tshowExpanderButton: true,\r\n\t\t\t\texpand_details: false, \r\n\t\t\t\telement_nr: nextNr,\r\n\t\t\t\telement_name: nextName,\r\n\t\t\t\telement_guid: nextGUID,\r\n\t\t\t\tforcedCSSSelector: nextSelector,\r\n\t\t\t\thandle_as_picture: handle_as_picture,\r\n\t\t\t\thandle_as_picture_srctag: handle_as_picture_srctag\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tselectorsPickResults.push(`{ 'element_guid': '${nextGUID}', 'page_addition_result': 'ok' }`);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t \r\n\t\t\t//Add hidden element\r\n\t\t\tlet hiddenElement = document.createElement('div');\r\n\t\t\thiddenElement.classList.add('de-hidden');\r\n\t\t\thiddenElement.setAttribute('data-role', 'de-hidden-pseudo-element');\r\n\t\t\thiddenElement.setAttribute('data-elementguid', nextGUID);\r\n\t\t\tdocument.body.appendChild(hiddenElement);\r\n\t\t\twindow.dePageInspector.currentHoveredElementLink = hiddenElement;\r\n\t\t\t \r\n\t\t\t//Add pseudo-element into picked nodes\r\n\t\t\thandleHTMLElementPicked({ \r\n\t\t\t\taddIntoPickedElements: true,\r\n\t\t\t\tshowExpanderButton: true,\r\n\t\t\t\texpand_details: false, \r\n\t\t\t\telement_nr: nextNr,\r\n\t\t\t\telement_name: nextName,\r\n\t\t\t\telement_guid: nextGUID,\r\n\t\t\t\tforcedCSSSelector: nextSelector,\r\n\t\t\t\thandle_as_picture: handle_as_picture,\r\n\t\t\t\thandle_as_picture_srctag: handle_as_picture_srctag\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tselectorsPickResults.push(`{ 'element_guid': '${nextGUID}', 'page_addition_result': 'not_found' }`);\r\n\t\t}\r\n\t\t\r\n\t\t/* Drop event to console */ \r\n\t\tlet builtSelectorsString = selectorsPickResults.join(', ');\r\n\t\tlet eventMessageText = `{ 'console_message': 'de_environment_event', 'event_details': { 'event_type': 'css_selectors_loaded', 'event_data': null, 'found_selectors': [ ${builtSelectorsString} ] } }`;\r\n\t\tconsole.log(eventMessageText); \r\n\t}\r\n\t\r\n\t/* Clear all picked and hovered elements on the page */\r\n\twindow.dePageInspector.clearAllPickedAndHoveredElements = function() {\r\n\t\t\r\n\t\t/* Clear all picked elements */\r\n\t\twindow.dePageInspector.pagePickedElements = [];\r\n\t\t \r\n\t\t/* Remove all labels */ \r\n\t\tlet allLabels = document.querySelectorAll(`.de-selected-element-number`);\r\n\t\tfor (let ep = 0; ep < allLabels.length; ep++)\r\n\t\t\tallLabels[ep].remove();\r\n\t\t \r\n\t\t/* Remove all expanded elements */\r\n\t\tlet allExpandedElements = document.querySelectorAll(`[data-role='de-elements-highlighter']`);\r\n\t\tfor (let ep = 0; ep < allExpandedElements.length; ep++) {\r\n\t\t\tif (window.dePageInspector.elementsHighlighter !== allExpandedElements[ep])\r\n\t\t\t\tallExpandedElements[ep].remove();\r\n\t\t}\r\n\t\t\r\n\t\t/* Unlight all picked elements on the page */\r\n\t\tlet allLightedElementsOnThePage = document.querySelectorAll(`[data-de-lighted-element]`);\r\n\t\tfor (let ep = 0; ep < allLightedElementsOnThePage.length; ep++) {\r\n\t\t\tallLightedElementsOnThePage[ep].removeAttribute('data-de-lighted-element');\r\n\t\t\tallLightedElementsOnThePage[ep].removeAttribute('data-ignorehover');\r\n\t\t\tallLightedElementsOnThePage[ep].removeAttribute('data-linkedguid');\r\n\t\t\tallLightedElementsOnThePage[ep].removeAttribute('data-temppicked'); \r\n\t\t}\r\n\t\t\r\n\t\t/* Set containers to null */\r\n\t\twindow.dePageInspector.actualExpandedElement = null;\r\n\t\twindow.dePageInspector.currentHoveredElementLink = null; \r\n\t}\r\n\t\r\n\t/* Update picked node name */\r\n\twindow.dePageInspector.updatePickedNodeName = function(element_guid, element_new_name) {\r\n\t\t\r\n\t\tfor (let pe = 0; pe < window.dePageInspector.pagePickedElements.length; pe++) {\r\n\t\t\tif (window.dePageInspector.pagePickedElements[pe].pickedElementGUID === element_guid) {\r\n\t\t\t\t\r\n\t\t\t\tlet elementLabelLink = window.dePageInspector.pagePickedElements[pe].selectedElementTopLabelBlock;\r\n\t\t\t\tlet elementNodeNameLink = elementLabelLink.querySelector(`[data-role='selector-name']`);\r\n\t\t\t\telementNodeNameLink.innerHTML = element_new_name;\r\n\t\t\t;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/* Initialize behavior */\r\n\tfunction InitializeDataExcavatorNodesPicker() {\r\n\t\r\n\t\t/* Insert picker style */\r\n\t\tinsertDataExcavatorPageStyle();\r\n\t\t\r\n\t\t/* Initialize elements picker (hovering frame) */\r\n\t\tlet elementsHighlighter = createAndInsertDocumentElementsSelector();\r\n\t\twindow.dePageInspector.elementsHighlighter = elementsHighlighter;\r\n\t\twindow.dePageInspector.elementsHighlighter.querySelector(`[data-role='pick-element-button']`).addEventListener('click', event => {\r\n\t\t\thandleHTMLElementPicked();\r\n\t\t});\r\n\t\t\r\n\t\t/* Subscribe page resize event */\r\n\t\twindow.addEventListener('resize', event => {\r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t});\r\n\t\t\r\n\t\t/* Subscribe page scroll event */\r\n\t\tdocument.addEventListener('scroll', event => { \r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t});\r\n\t\t\r\n\t\t/* Subscribe page blur event */\r\n\t\twindow.addEventListener('blur', event => {\r\n\t\t\tcorrectAllLightedElementsPositions();\r\n\t\t});\r\n\t\t\r\n\t\t/* Handle page 'Enter' pressed */\r\n\t\tdocument.addEventListener('keyup', event => {\r\n\t\t\tif (event.which === 13) {\r\n\t\t\t\thandleHTMLElementPicked();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/* Initialize */\r\n\tInitializeDataExcavatorNodesPicker();\r\n\r\n}());\r\n";

		private MainWindow MainWindowLink { get; set; }

		private DEProjectCubeProperties ProjectCubePropertiesWindowLink { get; set; }

		private DECreateFirstProjectWithPicker CreateExpressProjectModalLink { get; set; }

		private Dispatcher ParentDispatcher
		{
			get
			{
				if (ProjectCubePropertiesWindowLink != null)
				{
					return ProjectCubePropertiesWindowLink.Dispatcher;
				}
				if (CreateExpressProjectModalLink != null)
				{
					return CreateExpressProjectModalLink.Dispatcher;
				}
				return null;
			}
		}

		private ChromiumWebBrowser ChromiumLink { get; set; }

		private StackPanel SelectorsUIStack { get; set; }

		private string ExamplePageURL { get; set; }

		private Thread PickerInstallerThread { get; set; }

		public bool IsPickerInstalled { get; private set; }

		public ChromiumJSNodesPicker(MainWindow MainWindowLink, DEProjectCubeProperties ProjectCubeProperties, ChromiumWebBrowser ChromiumLink, StackPanel SelectorsUIStack, string ExamplePageURL, DECreateFirstProjectWithPicker CreateFirstProjectModalLink = null)
		{
			this.MainWindowLink = MainWindowLink;
			ProjectCubePropertiesWindowLink = ProjectCubeProperties;
			CreateExpressProjectModalLink = CreateFirstProjectModalLink;
			this.ChromiumLink = ChromiumLink;
			this.SelectorsUIStack = SelectorsUIStack;
			this.ExamplePageURL = ExamplePageURL;
			this.ChromiumLink.ConsoleMessage += ChromiumLink_ConsoleMessage;
			IsPickerInstalled = false;
		}

		public void HandleSelectorRemovedFromUI(string ElementGUID)
		{
			string jSScript = $"(function() {{ window.dePageInspector.removeSelectorFromUI(`{ElementGUID}`); }}());";
			EvaluateScriptAndGetResult(jSScript);
		}

		public void HandleNodeExpandedIntoUI(string ElementGUID)
		{
			HandleCollapseAllNodesIntoUI();
			string jSScript = $"(function() {{ window.dePageInspector.expandSelectorProperties('{ElementGUID}'); }}());";
			EvaluateScriptAndGetResult(jSScript);
		}

		public void HandleCollapseAllNodesIntoUI()
		{
			string jSScript = $"(function() {{ window.dePageInspector.collapseOpenedSelectorProperties(); }}());";
			EvaluateScriptAndGetResult(jSScript);
		}

		public void HandleNodeNameChangedFromUI(string NodeGUID, string NodeNewName)
		{
			string jSScript = $"(function() {{ window.dePageInspector.updatePickedNodeName(`{NodeGUID}`, `{NodeNewName}`); }}());";
			EvaluateScriptAndGetResult(jSScript);
		}

		public void BlindAllUINodes()
		{
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				for (int i = 0; i < SelectorsUIStack.Children.Count; i++)
				{
					(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).Opacity = 0.5;
				}
			});
		}

		public void UnblindAllUINodes()
		{
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				for (int i = 0; i < SelectorsUIStack.Children.Count; i++)
				{
					(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).Opacity = 1.0;
					(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).ExpandCollapseElementSVGAwesomeIcon.Foreground = UICommonExtensions.BrushFromHex("#2b71bc");
				}
			});
		}

		public void UnblindSelectedUINode(string NodeGUID)
		{
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				for (int i = 0; i < SelectorsUIStack.Children.Count; i++)
				{
					if ((SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).SelectorGUID == NodeGUID)
					{
						(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).Opacity = 1.0;
						(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).ExpandCollapseElementSVGAwesomeIcon.Foreground = Brushes.Green;
					}
				}
			});
		}

		private void ChromiumLink_ConsoleMessage(object sender, ConsoleMessageEventArgs e)
		{
			string message = e.Message;
			if (message.IndexOf("de_environment_event") == -1)
			{
				return;
			}
			DEJSNodePickerEvent EventDecodedData = JsonConvert.DeserializeObject<DEJSNodePickerEvent>(message);
			if (EventDecodedData.event_details.event_type == "css_selectors_loaded")
			{
				ParentDispatcher.BeginInvoke((Action)delegate
				{
					for (int l = 0; l < EventDecodedData.event_details.found_selectors.Count; l++)
					{
						if (EventDecodedData.event_details.found_selectors[l].page_addition_result == "not_found")
						{
							for (int m = 0; m < SelectorsUIStack.Children.Count; m++)
							{
								if ((SelectorsUIStack.Children[m] as DEGrabberFlatItemSelector).SelectorGUID == EventDecodedData.event_details.found_selectors[l].element_guid)
								{
									(SelectorsUIStack.Children[m] as DEGrabberFlatItemSelector).NodeNotFoundOnThePage.Visibility = Visibility.Visible;
								}
							}
						}
						else
						{
							for (int n = 0; n < SelectorsUIStack.Children.Count; n++)
							{
								if ((SelectorsUIStack.Children[n] as DEGrabberFlatItemSelector).SelectorGUID == EventDecodedData.event_details.found_selectors[l].element_guid)
								{
									(SelectorsUIStack.Children[n] as DEGrabberFlatItemSelector).NodeNotFoundOnThePage.Visibility = Visibility.Collapsed;
								}
							}
						}
					}
				});
				IsPickerInstalled = true;
			}
			else if (EventDecodedData.event_details.event_type == "html_node_removed")
			{
				string ElementGUID = EventDecodedData.event_details.event_data["pickedElementGUID"].ToString();
				ParentDispatcher.BeginInvoke((Action)delegate
				{
					for (int k = 0; k < SelectorsUIStack.Children.Count; k++)
					{
						if ((SelectorsUIStack.Children[k] as DEGrabberFlatItemSelector).SelectorGUID == ElementGUID)
						{
							SelectorsUIStack.Children.RemoveAt(k);
							break;
						}
					}
				});
				UnblindAllUINodes();
				if (ProjectCubePropertiesWindowLink != null)
				{
					ProjectCubePropertiesWindowLink.UpdateDataToScrapeNodesCount();
				}
			}
			else if (EventDecodedData.event_details.event_type == "html_node_saved")
			{
				string ElementGUID2 = EventDecodedData.event_details.event_data["pickedElementGUID"].ToString();
				string ElementCSSSelector = EventDecodedData.event_details.event_data["element_css_selector"].ToString();
				bool IsElementPickedAsImage = Convert.ToBoolean(EventDecodedData.event_details.event_data["handle_as_picture"].ToString());
				string IsElementPickedAsImage_SourceTag = EventDecodedData.event_details.event_data["handle_as_picture_srctag"].ToString();
				ParentDispatcher.BeginInvoke((Action)delegate
				{
					bool flag = false;
					DEGrabberFlatItemSelector dEGrabberFlatItemSelector = null;
					for (int j = 0; j < SelectorsUIStack.Children.Count; j++)
					{
						if ((SelectorsUIStack.Children[j] as DEGrabberFlatItemSelector).SelectorGUID == ElementGUID2)
						{
							dEGrabberFlatItemSelector = (DEGrabberFlatItemSelector)SelectorsUIStack.Children[j];
							flag = true;
							break;
						}
					}
					if (flag)
					{
						dEGrabberFlatItemSelector.IsSelectorUpdatedFromBrowser = true;
						dEGrabberFlatItemSelector.ScrapingNodeSelectorData.Text = ElementCSSSelector;
					}
					else
					{
						int num = SelectorsUIStack.Children.Count + 1;
						dEGrabberFlatItemSelector = new DEGrabberFlatItemSelector(ProjectCubePropertiesWindowLink);
						dEGrabberFlatItemSelector.IsSelectorUpdatedFromBrowser = true;
						dEGrabberFlatItemSelector.ScrapingNodeNameTextArea.Text = $"Selector #{num}";
						dEGrabberFlatItemSelector.IsSelectorUpdatedFromBrowser = true;
						dEGrabberFlatItemSelector.SelectorNumber.Text = $"#{num}";
						dEGrabberFlatItemSelector.IsSelectorUpdatedFromBrowser = true;
						dEGrabberFlatItemSelector.ScrapingNodeSelectorData.Text = ElementCSSSelector;
						dEGrabberFlatItemSelector.SelectorGUID = ElementGUID2;
						dEGrabberFlatItemSelector.ScrapingNodeSelectorType.SelectedItem = EnumToItemsSource.GetDescriptionFromValue(DataGrabbingSelectorType.CSS_Selector);
						SelectorsUIStack.Children.Add(dEGrabberFlatItemSelector);
						if (ProjectCubePropertiesWindowLink != null)
						{
							ProjectCubePropertiesWindowLink.ParsingElementsScrollViewer.ScrollToBottom();
							ProjectCubePropertiesWindowLink.UpdateDataToScrapeNodesCount();
						}
					}
					if (IsElementPickedAsImage)
					{
						ParsingBinaryAttributePattern item = new ParsingBinaryAttributePattern(IsElementPickedAsImage_SourceTag, IsAttributeAreLinkToSomeResouce: true, IsWeMustDownloadContentUnderAttributeLink: true);
						dEGrabberFlatItemSelector.ParsingAttributesList = new List<ParsingBinaryAttributePattern>();
						dEGrabberFlatItemSelector.ParsingAttributesList.Add(item);
						dEGrabberFlatItemSelector.SpecialSettings_NodesToScrape.Text = "1";
						dEGrabberFlatItemSelector.SpecialSettings_NodesToScrape.FontWeight = FontWeights.Bold;
					}
					else
					{
						dEGrabberFlatItemSelector.ParsingAttributesList = new List<ParsingBinaryAttributePattern>();
						dEGrabberFlatItemSelector.SpecialSettings_NodesToScrape.Text = "0";
						dEGrabberFlatItemSelector.SpecialSettings_NodesToScrape.FontWeight = FontWeights.Normal;
					}
				});
			}
			else if (EventDecodedData.event_details.event_type == "node_data_expanded")
			{
				string ExpandedNodeGUID = EventDecodedData.event_details.event_data["guid"].ToString();
				BlindAllUINodes();
				UnblindSelectedUINode(ExpandedNodeGUID);
				ParentDispatcher.BeginInvoke((Action)delegate
				{
					for (int i = 0; i < SelectorsUIStack.Children.Count; i++)
					{
						if ((SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).SelectorGUID == ExpandedNodeGUID)
						{
							(SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector).BringIntoView();
						}
					}
				});
			}
			else if (EventDecodedData.event_details.event_type == "node_data_collapsed")
			{
				UnblindAllUINodes();
			}
		}

		public void NavigateAndSetupPickerWithPickedNodes()
		{
			PickerInstallerThread = new Thread(NavigateAndSetupPickerWithPickedNodesFunc);
			PickerInstallerThread.Start();
		}

		private void NavigateAndSetupPickerWithPickedNodesFunc()
		{
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				if (ProjectCubePropertiesWindowLink != null)
				{
					ProjectCubePropertiesWindowLink.BrowserLoadingGridOverlay.Visibility = Visibility.Visible;
				}
			});
			AsyncHelpers.RunSync(() => LoadPageWithGETAsync(ExamplePageURL));
			Thread.Sleep(5000);
			string text = EvaluateScriptAndGetResult(NodesJSPickerScript);
			Thread.Sleep(5000);
			if (ProjectCubePropertiesWindowLink != null && ProjectCubePropertiesWindowLink.ActualCEFCrawlingBehaviors != null && ProjectCubePropertiesWindowLink.ActualCEFCrawlingBehaviors.Count > 0)
			{
				CEFCrawlingBehavior cEFCrawlingBehavior = ProjectCubePropertiesWindowLink.ActualCEFCrawlingBehaviors.ElementAt(0);
				if (cEFCrawlingBehavior.JSScriptToExecute_Step2 != null && cEFCrawlingBehavior.JSScriptToExecute_Step2.Length > 0)
				{
					EvaluateScriptAndGetResult(cEFCrawlingBehavior.JSScriptToExecute_Step2);
				}
				_ = cEFCrawlingBehavior.WaitAfterpageLoaded_InSeconds_Step3;
				if (cEFCrawlingBehavior.WaitAfterpageLoaded_InSeconds_Step3 > 0)
				{
					Thread.Sleep(cEFCrawlingBehavior.WaitAfterpageLoaded_InSeconds_Step3 * 1000);
				}
				if (cEFCrawlingBehavior.JSScriptToExecuteAfterPageHTMLCodeGrabbed != null && cEFCrawlingBehavior.JSScriptToExecuteAfterPageHTMLCodeGrabbed.Length > 0)
				{
					EvaluateScriptAndGetResult(cEFCrawlingBehavior.JSScriptToExecuteAfterPageHTMLCodeGrabbed);
					Thread.Sleep(5000);
				}
			}
			AddPickedNodes();
		}

		public void AddPickedNodes()
		{
			string jSScript = $"(function() {{ window.dePageInspector.clearAllPickedAndHoveredElements(); }}());";
			EvaluateScriptAndGetResult(jSScript);
			Thread.Sleep(2000);
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				List<Dictionary<string, string>> list = new List<Dictionary<string, string>>();
				for (int i = 0; i < SelectorsUIStack.Children.Count; i++)
				{
					DEGrabberFlatItemSelector dEGrabberFlatItemSelector = SelectorsUIStack.Children[i] as DEGrabberFlatItemSelector;
					if (dEGrabberFlatItemSelector.CheckSelectorAndLightNodeIfSelectorIsWrong())
					{
						string value = "false";
						string value2 = "";
						if (dEGrabberFlatItemSelector.ParsingAttributesList.Count > 0 && dEGrabberFlatItemSelector.ParsingAttributesList[0].IsAttributeAreLinkToSomeResouce && dEGrabberFlatItemSelector.ParsingAttributesList[0].IsWeMustDownloadContentUnderAttributeLink)
						{
							value = "true";
							value2 = dEGrabberFlatItemSelector.ParsingAttributesList[0].AttributeName;
						}
						list.Add(new Dictionary<string, string>
						{
							{
								"element_nr",
								(i + 1).ToString()
							},
							{ "element_guid", dEGrabberFlatItemSelector.SelectorGUID },
							{ "element_node_name", "" },
							{
								"element_name",
								dEGrabberFlatItemSelector.ScrapingNodeNameTextArea.Text.ToString()
							},
							{
								"element_css_selector",
								dEGrabberFlatItemSelector.ScrapingNodeSelectorData.Text.ToString()
							},
							{ "handle_as_picture", value },
							{ "handle_as_picture_srctag", value2 }
						});
					}
				}
				if (list.Count > 0)
				{
					string text = JsonConvert.SerializeObject(list);
					text = text.Replace("\"", "\\\"");
					string jSScript2 = $"(function() {{\r\n\twindow.dePageInspector.initializeSelectors(`{text}`);\r\n}}());";
					string text2 = EvaluateScriptAndGetResult(jSScript2);
					Thread.Sleep(2000);
				}
				if (ProjectCubePropertiesWindowLink != null)
				{
					ProjectCubePropertiesWindowLink.BrowserLoadingGridOverlay.Visibility = Visibility.Collapsed;
				}
				if (CreateExpressProjectModalLink != null)
				{
					CreateExpressProjectModalLink.WaitLoaderOverlay.Visibility = Visibility.Collapsed;
				}
				for (int j = 0; j < SelectorsUIStack.Children.Count; j++)
				{
					(SelectorsUIStack.Children[j] as DEGrabberFlatItemSelector).ExpandElement.Visibility = Visibility.Visible;
				}
			});
		}

		public void ReAddPickedNodes()
		{
			PickerInstallerThread = new Thread(ReAddPickedNodesFunc);
			PickerInstallerThread.Start();
		}

		private void ReAddPickedNodesFunc()
		{
			ParentDispatcher.BeginInvoke((Action)delegate
			{
				if (ProjectCubePropertiesWindowLink != null)
				{
					ProjectCubePropertiesWindowLink.NodePicker_ReloadPageToUpdateNodes.Visibility = Visibility.Collapsed;
					ProjectCubePropertiesWindowLink.NodePickerOverlay.Visibility = Visibility.Collapsed;
					ProjectCubePropertiesWindowLink.BrowserLoadingGridOverlay.Visibility = Visibility.Visible;
				}
			});
			AddPickedNodes();
		}

		internal string EvaluateScriptAndGetResult(string JSScript)
		{
			JavascriptResponse javascriptResponse = AsyncHelpers.RunSync(() => ChromiumLink.EvaluateScriptAsync(JSScript));
			if (javascriptResponse.Success)
			{
				if (javascriptResponse.Result != null)
				{
					return javascriptResponse.Result.ToString();
				}
				return string.Empty;
			}
			return string.Empty;
		}

		private void CEFSetProxy(string Address, int Port, string Login, string Password)
		{
			AsyncHelpers.RunSync(() => Cef.UIThreadTaskFactory.StartNew(delegate
			{
				if (Login != string.Empty && Password != string.Empty)
				{
					ChromiumLink.RequestHandler = new CEFProxyAuthRequestHandler(Login, Password);
				}
				IRequestContext requestContext = ChromiumLink.GetBrowser().GetHost().RequestContext;
				string error;
				bool flag = requestContext.SetPreference("proxy", new Dictionary<string, object>(2)
				{
					["mode"] = "fixed_servers",
					["server"] = Address.Replace("http://", string.Empty).Replace("https://", string.Empty).Trim(' ', '/')
				}, out error);
			}));
		}

		private Task LoadPageWithGETAsync(string address)
		{
			TaskCompletionSource<bool> TaskSource = new TaskCompletionSource<bool>(TaskCreationOptions.None);
			EventHandler<LoadingStateChangedEventArgs> CEFPageLoadedHandler = null;
			CEFPageLoadedHandler = delegate(object sender, LoadingStateChangedEventArgs args)
			{
				if (!args.IsLoading)
				{
					ChromiumLink.LoadingStateChanged -= CEFPageLoadedHandler;
					TaskSource.TrySetResult(result: true);
				}
			};
			ChromiumLink.LoadingStateChanged += CEFPageLoadedHandler;
			ChromiumLink.Load(address);
			return TaskSource.Task;
		}
	}
}
